// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	api "github.com/lucassabreu/clockify-cli/api"
	cmdutil "github.com/lucassabreu/clockify-cli/pkg/cmdutil"

	dto "github.com/lucassabreu/clockify-cli/api/dto"

	mock "github.com/stretchr/testify/mock"
)

// MockFactory is an autogenerated mock type for the Factory type
type MockFactory struct {
	mock.Mock
}

type MockFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFactory) EXPECT() *MockFactory_Expecter {
	return &MockFactory_Expecter{mock: &_m.Mock}
}

// Client provides a mock function with given fields:
func (_m *MockFactory) Client() (api.Client, error) {
	ret := _m.Called()

	var r0 api.Client
	if rf, ok := ret.Get(0).(func() api.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFactory_Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Client'
type MockFactory_Client_Call struct {
	*mock.Call
}

// Client is a helper method to define mock.On call
func (_e *MockFactory_Expecter) Client() *MockFactory_Client_Call {
	return &MockFactory_Client_Call{Call: _e.mock.On("Client")}
}

func (_c *MockFactory_Client_Call) Run(run func()) *MockFactory_Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFactory_Client_Call) Return(_a0 api.Client, _a1 error) *MockFactory_Client_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Config provides a mock function with given fields:
func (_m *MockFactory) Config() cmdutil.Config {
	ret := _m.Called()

	var r0 cmdutil.Config
	if rf, ok := ret.Get(0).(func() cmdutil.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cmdutil.Config)
		}
	}

	return r0
}

// MockFactory_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type MockFactory_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
func (_e *MockFactory_Expecter) Config() *MockFactory_Config_Call {
	return &MockFactory_Config_Call{Call: _e.mock.On("Config")}
}

func (_c *MockFactory_Config_Call) Run(run func()) *MockFactory_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFactory_Config_Call) Return(_a0 cmdutil.Config) *MockFactory_Config_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetUserID provides a mock function with given fields:
func (_m *MockFactory) GetUserID() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFactory_GetUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserID'
type MockFactory_GetUserID_Call struct {
	*mock.Call
}

// GetUserID is a helper method to define mock.On call
func (_e *MockFactory_Expecter) GetUserID() *MockFactory_GetUserID_Call {
	return &MockFactory_GetUserID_Call{Call: _e.mock.On("GetUserID")}
}

func (_c *MockFactory_GetUserID_Call) Run(run func()) *MockFactory_GetUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFactory_GetUserID_Call) Return(_a0 string, _a1 error) *MockFactory_GetUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetWorkspace provides a mock function with given fields:
func (_m *MockFactory) GetWorkspace() (dto.Workspace, error) {
	ret := _m.Called()

	var r0 dto.Workspace
	if rf, ok := ret.Get(0).(func() dto.Workspace); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dto.Workspace)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFactory_GetWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspace'
type MockFactory_GetWorkspace_Call struct {
	*mock.Call
}

// GetWorkspace is a helper method to define mock.On call
func (_e *MockFactory_Expecter) GetWorkspace() *MockFactory_GetWorkspace_Call {
	return &MockFactory_GetWorkspace_Call{Call: _e.mock.On("GetWorkspace")}
}

func (_c *MockFactory_GetWorkspace_Call) Run(run func()) *MockFactory_GetWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFactory_GetWorkspace_Call) Return(_a0 dto.Workspace, _a1 error) *MockFactory_GetWorkspace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetWorkspaceID provides a mock function with given fields:
func (_m *MockFactory) GetWorkspaceID() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFactory_GetWorkspaceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceID'
type MockFactory_GetWorkspaceID_Call struct {
	*mock.Call
}

// GetWorkspaceID is a helper method to define mock.On call
func (_e *MockFactory_Expecter) GetWorkspaceID() *MockFactory_GetWorkspaceID_Call {
	return &MockFactory_GetWorkspaceID_Call{Call: _e.mock.On("GetWorkspaceID")}
}

func (_c *MockFactory_GetWorkspaceID_Call) Run(run func()) *MockFactory_GetWorkspaceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFactory_GetWorkspaceID_Call) Return(_a0 string, _a1 error) *MockFactory_GetWorkspaceID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Version provides a mock function with given fields:
func (_m *MockFactory) Version() cmdutil.Version {
	ret := _m.Called()

	var r0 cmdutil.Version
	if rf, ok := ret.Get(0).(func() cmdutil.Version); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(cmdutil.Version)
	}

	return r0
}

// MockFactory_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockFactory_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *MockFactory_Expecter) Version() *MockFactory_Version_Call {
	return &MockFactory_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *MockFactory_Version_Call) Run(run func()) *MockFactory_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFactory_Version_Call) Return(_a0 cmdutil.Version) *MockFactory_Version_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockFactory creates a new instance of MockFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockFactory(t mockConstructorTestingTNewMockFactory) *MockFactory {
	mock := &MockFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
