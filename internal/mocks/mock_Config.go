// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockConfig is an autogenerated mock type for the Config type
type MockConfig struct {
	mock.Mock
}

// All provides a mock function with given fields:
func (_m *MockConfig) All() map[string]interface{} {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *MockConfig) Get(_a0 string) interface{} {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetBool provides a mock function with given fields: _a0
func (_m *MockConfig) GetBool(_a0 string) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetInt provides a mock function with given fields: _a0
func (_m *MockConfig) GetInt(_a0 string) int {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetString provides a mock function with given fields: _a0
func (_m *MockConfig) GetString(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetStringSlice provides a mock function with given fields: _a0
func (_m *MockConfig) GetStringSlice(_a0 string) []string {
	ret := _m.Called(_a0)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetWorkWeekdays provides a mock function with given fields:
func (_m *MockConfig) GetWorkWeekdays() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// IsAllowNameForID provides a mock function with given fields:
func (_m *MockConfig) IsAllowNameForID() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsDebuging provides a mock function with given fields:
func (_m *MockConfig) IsDebuging() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsInteractive provides a mock function with given fields:
func (_m *MockConfig) IsInteractive() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Save provides a mock function with given fields:
func (_m *MockConfig) Save() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetBool provides a mock function with given fields: _a0, _a1
func (_m *MockConfig) SetBool(_a0 string, _a1 bool) {
	_m.Called(_a0, _a1)
}

// SetInt provides a mock function with given fields: _a0, _a1
func (_m *MockConfig) SetInt(_a0 string, _a1 int) {
	_m.Called(_a0, _a1)
}

// SetString provides a mock function with given fields: _a0, _a1
func (_m *MockConfig) SetString(_a0 string, _a1 string) {
	_m.Called(_a0, _a1)
}

// SetStringSlice provides a mock function with given fields: _a0, _a1
func (_m *MockConfig) SetStringSlice(_a0 string, _a1 []string) {
	_m.Called(_a0, _a1)
}

type mockConstructorTestingTNewMockConfig interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockConfig creates a new instance of MockConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockConfig(t mockConstructorTestingTNewMockConfig) *MockConfig {
	mock := &MockConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
