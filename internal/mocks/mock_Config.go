// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	mock "github.com/stretchr/testify/mock"
	"golang.org/x/text/language"
)

// NewMockConfig creates a new instance of MockConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfig {
	mock := &MockConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfig is an autogenerated mock type for the Config type
type MockConfig struct {
	mock.Mock
}

type MockConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfig) EXPECT() *MockConfig_Expecter {
	return &MockConfig_Expecter{mock: &_m.Mock}
}

// All provides a mock function for the type MockConfig
func (_mock *MockConfig) All() map[string]interface{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 map[string]interface{}
	if returnFunc, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}
	return r0
}

// MockConfig_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockConfig_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *MockConfig_Expecter) All() *MockConfig_All_Call {
	return &MockConfig_All_Call{Call: _e.mock.On("All")}
}

func (_c *MockConfig_All_Call) Run(run func()) *MockConfig_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_All_Call) Return(stringToIfaceVal map[string]interface{}) *MockConfig_All_Call {
	_c.Call.Return(stringToIfaceVal)
	return _c
}

func (_c *MockConfig_All_Call) RunAndReturn(run func() map[string]interface{}) *MockConfig_All_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockConfig
func (_mock *MockConfig) Get(s string) interface{} {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	if returnFunc, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = returnFunc(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	return r0
}

// MockConfig_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockConfig_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - s string
func (_e *MockConfig_Expecter) Get(s interface{}) *MockConfig_Get_Call {
	return &MockConfig_Get_Call{Call: _e.mock.On("Get", s)}
}

func (_c *MockConfig_Get_Call) Run(run func(s string)) *MockConfig_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfig_Get_Call) Return(ifaceVal interface{}) *MockConfig_Get_Call {
	_c.Call.Return(ifaceVal)
	return _c
}

func (_c *MockConfig_Get_Call) RunAndReturn(run func(s string) interface{}) *MockConfig_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetBool provides a mock function for the type MockConfig
func (_mock *MockConfig) GetBool(s string) bool {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for GetBool")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(s)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockConfig_GetBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBool'
type MockConfig_GetBool_Call struct {
	*mock.Call
}

// GetBool is a helper method to define mock.On call
//   - s string
func (_e *MockConfig_Expecter) GetBool(s interface{}) *MockConfig_GetBool_Call {
	return &MockConfig_GetBool_Call{Call: _e.mock.On("GetBool", s)}
}

func (_c *MockConfig_GetBool_Call) Run(run func(s string)) *MockConfig_GetBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfig_GetBool_Call) Return(b bool) *MockConfig_GetBool_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockConfig_GetBool_Call) RunAndReturn(run func(s string) bool) *MockConfig_GetBool_Call {
	_c.Call.Return(run)
	return _c
}

// GetInt provides a mock function for the type MockConfig
func (_mock *MockConfig) GetInt(s string) int {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for GetInt")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func(string) int); ok {
		r0 = returnFunc(s)
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockConfig_GetInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInt'
type MockConfig_GetInt_Call struct {
	*mock.Call
}

// GetInt is a helper method to define mock.On call
//   - s string
func (_e *MockConfig_Expecter) GetInt(s interface{}) *MockConfig_GetInt_Call {
	return &MockConfig_GetInt_Call{Call: _e.mock.On("GetInt", s)}
}

func (_c *MockConfig_GetInt_Call) Run(run func(s string)) *MockConfig_GetInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfig_GetInt_Call) Return(n int) *MockConfig_GetInt_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockConfig_GetInt_Call) RunAndReturn(run func(s string) int) *MockConfig_GetInt_Call {
	_c.Call.Return(run)
	return _c
}

// GetString provides a mock function for the type MockConfig
func (_mock *MockConfig) GetString(s string) string {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for GetString")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(s)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockConfig_GetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetString'
type MockConfig_GetString_Call struct {
	*mock.Call
}

// GetString is a helper method to define mock.On call
//   - s string
func (_e *MockConfig_Expecter) GetString(s interface{}) *MockConfig_GetString_Call {
	return &MockConfig_GetString_Call{Call: _e.mock.On("GetString", s)}
}

func (_c *MockConfig_GetString_Call) Run(run func(s string)) *MockConfig_GetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfig_GetString_Call) Return(s1 string) *MockConfig_GetString_Call {
	_c.Call.Return(s1)
	return _c
}

func (_c *MockConfig_GetString_Call) RunAndReturn(run func(s string) string) *MockConfig_GetString_Call {
	_c.Call.Return(run)
	return _c
}

// GetStringSlice provides a mock function for the type MockConfig
func (_mock *MockConfig) GetStringSlice(s string) []string {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for GetStringSlice")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(string) []string); ok {
		r0 = returnFunc(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockConfig_GetStringSlice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringSlice'
type MockConfig_GetStringSlice_Call struct {
	*mock.Call
}

// GetStringSlice is a helper method to define mock.On call
//   - s string
func (_e *MockConfig_Expecter) GetStringSlice(s interface{}) *MockConfig_GetStringSlice_Call {
	return &MockConfig_GetStringSlice_Call{Call: _e.mock.On("GetStringSlice", s)}
}

func (_c *MockConfig_GetStringSlice_Call) Run(run func(s string)) *MockConfig_GetStringSlice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfig_GetStringSlice_Call) Return(strings []string) *MockConfig_GetStringSlice_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockConfig_GetStringSlice_Call) RunAndReturn(run func(s string) []string) *MockConfig_GetStringSlice_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkWeekdays provides a mock function for the type MockConfig
func (_mock *MockConfig) GetWorkWeekdays() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkWeekdays")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockConfig_GetWorkWeekdays_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkWeekdays'
type MockConfig_GetWorkWeekdays_Call struct {
	*mock.Call
}

// GetWorkWeekdays is a helper method to define mock.On call
func (_e *MockConfig_Expecter) GetWorkWeekdays() *MockConfig_GetWorkWeekdays_Call {
	return &MockConfig_GetWorkWeekdays_Call{Call: _e.mock.On("GetWorkWeekdays")}
}

func (_c *MockConfig_GetWorkWeekdays_Call) Run(run func()) *MockConfig_GetWorkWeekdays_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_GetWorkWeekdays_Call) Return(strings []string) *MockConfig_GetWorkWeekdays_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockConfig_GetWorkWeekdays_Call) RunAndReturn(run func() []string) *MockConfig_GetWorkWeekdays_Call {
	_c.Call.Return(run)
	return _c
}

// InteractivePageSize provides a mock function for the type MockConfig
func (_mock *MockConfig) InteractivePageSize() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for InteractivePageSize")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockConfig_InteractivePageSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InteractivePageSize'
type MockConfig_InteractivePageSize_Call struct {
	*mock.Call
}

// InteractivePageSize is a helper method to define mock.On call
func (_e *MockConfig_Expecter) InteractivePageSize() *MockConfig_InteractivePageSize_Call {
	return &MockConfig_InteractivePageSize_Call{Call: _e.mock.On("InteractivePageSize")}
}

func (_c *MockConfig_InteractivePageSize_Call) Run(run func()) *MockConfig_InteractivePageSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_InteractivePageSize_Call) Return(n int) *MockConfig_InteractivePageSize_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockConfig_InteractivePageSize_Call) RunAndReturn(run func() int) *MockConfig_InteractivePageSize_Call {
	_c.Call.Return(run)
	return _c
}

// IsAllowNameForID provides a mock function for the type MockConfig
func (_mock *MockConfig) IsAllowNameForID() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsAllowNameForID")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockConfig_IsAllowNameForID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAllowNameForID'
type MockConfig_IsAllowNameForID_Call struct {
	*mock.Call
}

// IsAllowNameForID is a helper method to define mock.On call
func (_e *MockConfig_Expecter) IsAllowNameForID() *MockConfig_IsAllowNameForID_Call {
	return &MockConfig_IsAllowNameForID_Call{Call: _e.mock.On("IsAllowNameForID")}
}

func (_c *MockConfig_IsAllowNameForID_Call) Run(run func()) *MockConfig_IsAllowNameForID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_IsAllowNameForID_Call) Return(b bool) *MockConfig_IsAllowNameForID_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockConfig_IsAllowNameForID_Call) RunAndReturn(run func() bool) *MockConfig_IsAllowNameForID_Call {
	_c.Call.Return(run)
	return _c
}

// IsDebuging provides a mock function for the type MockConfig
func (_mock *MockConfig) IsDebuging() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsDebuging")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockConfig_IsDebuging_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDebuging'
type MockConfig_IsDebuging_Call struct {
	*mock.Call
}

// IsDebuging is a helper method to define mock.On call
func (_e *MockConfig_Expecter) IsDebuging() *MockConfig_IsDebuging_Call {
	return &MockConfig_IsDebuging_Call{Call: _e.mock.On("IsDebuging")}
}

func (_c *MockConfig_IsDebuging_Call) Run(run func()) *MockConfig_IsDebuging_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_IsDebuging_Call) Return(b bool) *MockConfig_IsDebuging_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockConfig_IsDebuging_Call) RunAndReturn(run func() bool) *MockConfig_IsDebuging_Call {
	_c.Call.Return(run)
	return _c
}

// IsInteractive provides a mock function for the type MockConfig
func (_mock *MockConfig) IsInteractive() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInteractive")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockConfig_IsInteractive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInteractive'
type MockConfig_IsInteractive_Call struct {
	*mock.Call
}

// IsInteractive is a helper method to define mock.On call
func (_e *MockConfig_Expecter) IsInteractive() *MockConfig_IsInteractive_Call {
	return &MockConfig_IsInteractive_Call{Call: _e.mock.On("IsInteractive")}
}

func (_c *MockConfig_IsInteractive_Call) Run(run func()) *MockConfig_IsInteractive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_IsInteractive_Call) Return(b bool) *MockConfig_IsInteractive_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockConfig_IsInteractive_Call) RunAndReturn(run func() bool) *MockConfig_IsInteractive_Call {
	_c.Call.Return(run)
	return _c
}

// IsSearchProjectWithClientsName provides a mock function for the type MockConfig
func (_mock *MockConfig) IsSearchProjectWithClientsName() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsSearchProjectWithClientsName")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockConfig_IsSearchProjectWithClientsName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSearchProjectWithClientsName'
type MockConfig_IsSearchProjectWithClientsName_Call struct {
	*mock.Call
}

// IsSearchProjectWithClientsName is a helper method to define mock.On call
func (_e *MockConfig_Expecter) IsSearchProjectWithClientsName() *MockConfig_IsSearchProjectWithClientsName_Call {
	return &MockConfig_IsSearchProjectWithClientsName_Call{Call: _e.mock.On("IsSearchProjectWithClientsName")}
}

func (_c *MockConfig_IsSearchProjectWithClientsName_Call) Run(run func()) *MockConfig_IsSearchProjectWithClientsName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_IsSearchProjectWithClientsName_Call) Return(b bool) *MockConfig_IsSearchProjectWithClientsName_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockConfig_IsSearchProjectWithClientsName_Call) RunAndReturn(run func() bool) *MockConfig_IsSearchProjectWithClientsName_Call {
	_c.Call.Return(run)
	return _c
}

// Language provides a mock function for the type MockConfig
func (_mock *MockConfig) Language() language.Tag {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Language")
	}

	var r0 language.Tag
	if returnFunc, ok := ret.Get(0).(func() language.Tag); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(language.Tag)
	}
	return r0
}

// MockConfig_Language_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Language'
type MockConfig_Language_Call struct {
	*mock.Call
}

// Language is a helper method to define mock.On call
func (_e *MockConfig_Expecter) Language() *MockConfig_Language_Call {
	return &MockConfig_Language_Call{Call: _e.mock.On("Language")}
}

func (_c *MockConfig_Language_Call) Run(run func()) *MockConfig_Language_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_Language_Call) Return(tag language.Tag) *MockConfig_Language_Call {
	_c.Call.Return(tag)
	return _c
}

func (_c *MockConfig_Language_Call) RunAndReturn(run func() language.Tag) *MockConfig_Language_Call {
	_c.Call.Return(run)
	return _c
}

// LogLevel provides a mock function for the type MockConfig
func (_mock *MockConfig) LogLevel() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LogLevel")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockConfig_LogLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogLevel'
type MockConfig_LogLevel_Call struct {
	*mock.Call
}

// LogLevel is a helper method to define mock.On call
func (_e *MockConfig_Expecter) LogLevel() *MockConfig_LogLevel_Call {
	return &MockConfig_LogLevel_Call{Call: _e.mock.On("LogLevel")}
}

func (_c *MockConfig_LogLevel_Call) Run(run func()) *MockConfig_LogLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_LogLevel_Call) Return(s string) *MockConfig_LogLevel_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockConfig_LogLevel_Call) RunAndReturn(run func() string) *MockConfig_LogLevel_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockConfig
func (_mock *MockConfig) Save() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfig_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockConfig_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
func (_e *MockConfig_Expecter) Save() *MockConfig_Save_Call {
	return &MockConfig_Save_Call{Call: _e.mock.On("Save")}
}

func (_c *MockConfig_Save_Call) Run(run func()) *MockConfig_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_Save_Call) Return(err error) *MockConfig_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfig_Save_Call) RunAndReturn(run func() error) *MockConfig_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SetBool provides a mock function for the type MockConfig
func (_mock *MockConfig) SetBool(s string, b bool) {
	_mock.Called(s, b)
	return
}

// MockConfig_SetBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBool'
type MockConfig_SetBool_Call struct {
	*mock.Call
}

// SetBool is a helper method to define mock.On call
//   - s string
//   - b bool
func (_e *MockConfig_Expecter) SetBool(s interface{}, b interface{}) *MockConfig_SetBool_Call {
	return &MockConfig_SetBool_Call{Call: _e.mock.On("SetBool", s, b)}
}

func (_c *MockConfig_SetBool_Call) Run(run func(s string, b bool)) *MockConfig_SetBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 bool
		if args[1] != nil {
			arg1 = args[1].(bool)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfig_SetBool_Call) Return() *MockConfig_SetBool_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConfig_SetBool_Call) RunAndReturn(run func(s string, b bool)) *MockConfig_SetBool_Call {
	_c.Run(run)
	return _c
}

// SetInt provides a mock function for the type MockConfig
func (_mock *MockConfig) SetInt(s string, n int) {
	_mock.Called(s, n)
	return
}

// MockConfig_SetInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetInt'
type MockConfig_SetInt_Call struct {
	*mock.Call
}

// SetInt is a helper method to define mock.On call
//   - s string
//   - n int
func (_e *MockConfig_Expecter) SetInt(s interface{}, n interface{}) *MockConfig_SetInt_Call {
	return &MockConfig_SetInt_Call{Call: _e.mock.On("SetInt", s, n)}
}

func (_c *MockConfig_SetInt_Call) Run(run func(s string, n int)) *MockConfig_SetInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfig_SetInt_Call) Return() *MockConfig_SetInt_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConfig_SetInt_Call) RunAndReturn(run func(s string, n int)) *MockConfig_SetInt_Call {
	_c.Run(run)
	return _c
}

// SetLanguage provides a mock function for the type MockConfig
func (_mock *MockConfig) SetLanguage(tag language.Tag) {
	_mock.Called(tag)
	return
}

// MockConfig_SetLanguage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLanguage'
type MockConfig_SetLanguage_Call struct {
	*mock.Call
}

// SetLanguage is a helper method to define mock.On call
//   - tag language.Tag
func (_e *MockConfig_Expecter) SetLanguage(tag interface{}) *MockConfig_SetLanguage_Call {
	return &MockConfig_SetLanguage_Call{Call: _e.mock.On("SetLanguage", tag)}
}

func (_c *MockConfig_SetLanguage_Call) Run(run func(tag language.Tag)) *MockConfig_SetLanguage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 language.Tag
		if args[0] != nil {
			arg0 = args[0].(language.Tag)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfig_SetLanguage_Call) Return() *MockConfig_SetLanguage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConfig_SetLanguage_Call) RunAndReturn(run func(tag language.Tag)) *MockConfig_SetLanguage_Call {
	_c.Run(run)
	return _c
}

// SetString provides a mock function for the type MockConfig
func (_mock *MockConfig) SetString(s string, s1 string) {
	_mock.Called(s, s1)
	return
}

// MockConfig_SetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetString'
type MockConfig_SetString_Call struct {
	*mock.Call
}

// SetString is a helper method to define mock.On call
//   - s string
//   - s1 string
func (_e *MockConfig_Expecter) SetString(s interface{}, s1 interface{}) *MockConfig_SetString_Call {
	return &MockConfig_SetString_Call{Call: _e.mock.On("SetString", s, s1)}
}

func (_c *MockConfig_SetString_Call) Run(run func(s string, s1 string)) *MockConfig_SetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfig_SetString_Call) Return() *MockConfig_SetString_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConfig_SetString_Call) RunAndReturn(run func(s string, s1 string)) *MockConfig_SetString_Call {
	_c.Run(run)
	return _c
}

// SetStringSlice provides a mock function for the type MockConfig
func (_mock *MockConfig) SetStringSlice(s string, strings []string) {
	_mock.Called(s, strings)
	return
}

// MockConfig_SetStringSlice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStringSlice'
type MockConfig_SetStringSlice_Call struct {
	*mock.Call
}

// SetStringSlice is a helper method to define mock.On call
//   - s string
//   - strings []string
func (_e *MockConfig_Expecter) SetStringSlice(s interface{}, strings interface{}) *MockConfig_SetStringSlice_Call {
	return &MockConfig_SetStringSlice_Call{Call: _e.mock.On("SetStringSlice", s, strings)}
}

func (_c *MockConfig_SetStringSlice_Call) Run(run func(s string, strings []string)) *MockConfig_SetStringSlice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfig_SetStringSlice_Call) Return() *MockConfig_SetStringSlice_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConfig_SetStringSlice_Call) RunAndReturn(run func(s string, strings []string)) *MockConfig_SetStringSlice_Call {
	_c.Run(run)
	return _c
}

// SetTimeZone provides a mock function for the type MockConfig
func (_mock *MockConfig) SetTimeZone(location *time.Location) {
	_mock.Called(location)
	return
}

// MockConfig_SetTimeZone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTimeZone'
type MockConfig_SetTimeZone_Call struct {
	*mock.Call
}

// SetTimeZone is a helper method to define mock.On call
//   - location *time.Location
func (_e *MockConfig_Expecter) SetTimeZone(location interface{}) *MockConfig_SetTimeZone_Call {
	return &MockConfig_SetTimeZone_Call{Call: _e.mock.On("SetTimeZone", location)}
}

func (_c *MockConfig_SetTimeZone_Call) Run(run func(location *time.Location)) *MockConfig_SetTimeZone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *time.Location
		if args[0] != nil {
			arg0 = args[0].(*time.Location)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfig_SetTimeZone_Call) Return() *MockConfig_SetTimeZone_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConfig_SetTimeZone_Call) RunAndReturn(run func(location *time.Location)) *MockConfig_SetTimeZone_Call {
	_c.Run(run)
	return _c
}

// TimeZone provides a mock function for the type MockConfig
func (_mock *MockConfig) TimeZone() *time.Location {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TimeZone")
	}

	var r0 *time.Location
	if returnFunc, ok := ret.Get(0).(func() *time.Location); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Location)
		}
	}
	return r0
}

// MockConfig_TimeZone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TimeZone'
type MockConfig_TimeZone_Call struct {
	*mock.Call
}

// TimeZone is a helper method to define mock.On call
func (_e *MockConfig_Expecter) TimeZone() *MockConfig_TimeZone_Call {
	return &MockConfig_TimeZone_Call{Call: _e.mock.On("TimeZone")}
}

func (_c *MockConfig_TimeZone_Call) Run(run func()) *MockConfig_TimeZone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_TimeZone_Call) Return(location *time.Location) *MockConfig_TimeZone_Call {
	_c.Call.Return(location)
	return _c
}

func (_c *MockConfig_TimeZone_Call) RunAndReturn(run func() *time.Location) *MockConfig_TimeZone_Call {
	_c.Call.Return(run)
	return _c
}
