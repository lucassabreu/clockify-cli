// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	api "github.com/lucassabreu/clockify-cli/api"
	dto "github.com/lucassabreu/clockify-cli/api/dto"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// AddClient provides a mock function with given fields: _a0
func (_m *MockClient) AddClient(_a0 api.AddClientParam) (dto.Client, error) {
	ret := _m.Called(_a0)

	var r0 dto.Client
	if rf, ok := ret.Get(0).(func(api.AddClientParam) dto.Client); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Client)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.AddClientParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddProject provides a mock function with given fields: _a0
func (_m *MockClient) AddProject(_a0 api.AddProjectParam) (dto.Project, error) {
	ret := _m.Called(_a0)

	var r0 dto.Project
	if rf, ok := ret.Get(0).(func(api.AddProjectParam) dto.Project); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Project)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.AddProjectParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddTask provides a mock function with given fields: _a0
func (_m *MockClient) AddTask(_a0 api.AddTaskParam) (dto.Task, error) {
	ret := _m.Called(_a0)

	var r0 dto.Task
	if rf, ok := ret.Get(0).(func(api.AddTaskParam) dto.Task); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.AddTaskParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeInvoiced provides a mock function with given fields: _a0
func (_m *MockClient) ChangeInvoiced(_a0 api.ChangeInvoicedParam) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(api.ChangeInvoicedParam) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTimeEntry provides a mock function with given fields: _a0
func (_m *MockClient) CreateTimeEntry(_a0 api.CreateTimeEntryParam) (dto.TimeEntryImpl, error) {
	ret := _m.Called(_a0)

	var r0 dto.TimeEntryImpl
	if rf, ok := ret.Get(0).(func(api.CreateTimeEntryParam) dto.TimeEntryImpl); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.TimeEntryImpl)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.CreateTimeEntryParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: _a0
func (_m *MockClient) DeleteTask(_a0 api.DeleteTaskParam) (dto.Task, error) {
	ret := _m.Called(_a0)

	var r0 dto.Task
	if rf, ok := ret.Get(0).(func(api.DeleteTaskParam) dto.Task); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.DeleteTaskParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTimeEntry provides a mock function with given fields: _a0
func (_m *MockClient) DeleteTimeEntry(_a0 api.DeleteTimeEntryParam) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(api.DeleteTimeEntryParam) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClients provides a mock function with given fields: _a0
func (_m *MockClient) GetClients(_a0 api.GetClientsParam) ([]dto.Client, error) {
	ret := _m.Called(_a0)

	var r0 []dto.Client
	if rf, ok := ret.Get(0).(func(api.GetClientsParam) []dto.Client); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetClientsParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHydratedTimeEntry provides a mock function with given fields: _a0
func (_m *MockClient) GetHydratedTimeEntry(_a0 api.GetTimeEntryParam) (*dto.TimeEntry, error) {
	ret := _m.Called(_a0)

	var r0 *dto.TimeEntry
	if rf, ok := ret.Get(0).(func(api.GetTimeEntryParam) *dto.TimeEntry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TimeEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetTimeEntryParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHydratedTimeEntryInProgress provides a mock function with given fields: _a0
func (_m *MockClient) GetHydratedTimeEntryInProgress(_a0 api.GetTimeEntryInProgressParam) (*dto.TimeEntry, error) {
	ret := _m.Called(_a0)

	var r0 *dto.TimeEntry
	if rf, ok := ret.Get(0).(func(api.GetTimeEntryInProgressParam) *dto.TimeEntry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TimeEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetTimeEntryInProgressParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMe provides a mock function with given fields:
func (_m *MockClient) GetMe() (dto.User, error) {
	ret := _m.Called()

	var r0 dto.User
	if rf, ok := ret.Get(0).(func() dto.User); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dto.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: _a0
func (_m *MockClient) GetProject(_a0 api.GetProjectParam) (*dto.Project, error) {
	ret := _m.Called(_a0)

	var r0 *dto.Project
	if rf, ok := ret.Get(0).(func(api.GetProjectParam) *dto.Project); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetProjectParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjects provides a mock function with given fields: _a0
func (_m *MockClient) GetProjects(_a0 api.GetProjectsParam) ([]dto.Project, error) {
	ret := _m.Called(_a0)

	var r0 []dto.Project
	if rf, ok := ret.Get(0).(func(api.GetProjectsParam) []dto.Project); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetProjectsParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTag provides a mock function with given fields: _a0
func (_m *MockClient) GetTag(_a0 api.GetTagParam) (*dto.Tag, error) {
	ret := _m.Called(_a0)

	var r0 *dto.Tag
	if rf, ok := ret.Get(0).(func(api.GetTagParam) *dto.Tag); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetTagParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTags provides a mock function with given fields: _a0
func (_m *MockClient) GetTags(_a0 api.GetTagsParam) ([]dto.Tag, error) {
	ret := _m.Called(_a0)

	var r0 []dto.Tag
	if rf, ok := ret.Get(0).(func(api.GetTagsParam) []dto.Tag); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetTagsParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTask provides a mock function with given fields: _a0
func (_m *MockClient) GetTask(_a0 api.GetTaskParam) (dto.Task, error) {
	ret := _m.Called(_a0)

	var r0 dto.Task
	if rf, ok := ret.Get(0).(func(api.GetTaskParam) dto.Task); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetTaskParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasks provides a mock function with given fields: _a0
func (_m *MockClient) GetTasks(_a0 api.GetTasksParam) ([]dto.Task, error) {
	ret := _m.Called(_a0)

	var r0 []dto.Task
	if rf, ok := ret.Get(0).(func(api.GetTasksParam) []dto.Task); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetTasksParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTimeEntry provides a mock function with given fields: _a0
func (_m *MockClient) GetTimeEntry(_a0 api.GetTimeEntryParam) (*dto.TimeEntryImpl, error) {
	ret := _m.Called(_a0)

	var r0 *dto.TimeEntryImpl
	if rf, ok := ret.Get(0).(func(api.GetTimeEntryParam) *dto.TimeEntryImpl); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TimeEntryImpl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetTimeEntryParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTimeEntryInProgress provides a mock function with given fields: _a0
func (_m *MockClient) GetTimeEntryInProgress(_a0 api.GetTimeEntryInProgressParam) (*dto.TimeEntryImpl, error) {
	ret := _m.Called(_a0)

	var r0 *dto.TimeEntryImpl
	if rf, ok := ret.Get(0).(func(api.GetTimeEntryInProgressParam) *dto.TimeEntryImpl); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TimeEntryImpl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetTimeEntryInProgressParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: _a0
func (_m *MockClient) GetUser(_a0 api.GetUser) (dto.User, error) {
	ret := _m.Called(_a0)

	var r0 dto.User
	if rf, ok := ret.Get(0).(func(api.GetUser) dto.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetUser) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserTimeEntries provides a mock function with given fields: _a0
func (_m *MockClient) GetUserTimeEntries(_a0 api.GetUserTimeEntriesParam) ([]dto.TimeEntryImpl, error) {
	ret := _m.Called(_a0)

	var r0 []dto.TimeEntryImpl
	if rf, ok := ret.Get(0).(func(api.GetUserTimeEntriesParam) []dto.TimeEntryImpl); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.TimeEntryImpl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetUserTimeEntriesParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersHydratedTimeEntries provides a mock function with given fields: _a0
func (_m *MockClient) GetUsersHydratedTimeEntries(_a0 api.GetUserTimeEntriesParam) ([]dto.TimeEntry, error) {
	ret := _m.Called(_a0)

	var r0 []dto.TimeEntry
	if rf, ok := ret.Get(0).(func(api.GetUserTimeEntriesParam) []dto.TimeEntry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.TimeEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetUserTimeEntriesParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspace provides a mock function with given fields: _a0
func (_m *MockClient) GetWorkspace(_a0 api.GetWorkspace) (dto.Workspace, error) {
	ret := _m.Called(_a0)

	var r0 dto.Workspace
	if rf, ok := ret.Get(0).(func(api.GetWorkspace) dto.Workspace); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Workspace)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetWorkspace) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspaces provides a mock function with given fields: _a0
func (_m *MockClient) GetWorkspaces(_a0 api.GetWorkspaces) ([]dto.Workspace, error) {
	ret := _m.Called(_a0)

	var r0 []dto.Workspace
	if rf, ok := ret.Get(0).(func(api.GetWorkspaces) []dto.Workspace); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Workspace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetWorkspaces) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Log provides a mock function with given fields: _a0
func (_m *MockClient) Log(_a0 api.LogParam) ([]dto.TimeEntry, error) {
	ret := _m.Called(_a0)

	var r0 []dto.TimeEntry
	if rf, ok := ret.Get(0).(func(api.LogParam) []dto.TimeEntry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.TimeEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.LogParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogRange provides a mock function with given fields: _a0
func (_m *MockClient) LogRange(_a0 api.LogRangeParam) ([]dto.TimeEntry, error) {
	ret := _m.Called(_a0)

	var r0 []dto.TimeEntry
	if rf, ok := ret.Get(0).(func(api.LogRangeParam) []dto.TimeEntry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.TimeEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.LogRangeParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Out provides a mock function with given fields: _a0
func (_m *MockClient) Out(_a0 api.OutParam) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(api.OutParam) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDebugLogger provides a mock function with given fields: logger
func (_m *MockClient) SetDebugLogger(logger api.Logger) api.Client {
	ret := _m.Called(logger)

	var r0 api.Client
	if rf, ok := ret.Get(0).(func(api.Logger) api.Client); ok {
		r0 = rf(logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.Client)
		}
	}

	return r0
}

// SetInfoLogger provides a mock function with given fields: logger
func (_m *MockClient) SetInfoLogger(logger api.Logger) api.Client {
	ret := _m.Called(logger)

	var r0 api.Client
	if rf, ok := ret.Get(0).(func(api.Logger) api.Client); ok {
		r0 = rf(logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.Client)
		}
	}

	return r0
}

// UpdateProject provides a mock function with given fields: _a0
func (_m *MockClient) UpdateProject(_a0 api.UpdateProjectParam) (dto.Project, error) {
	ret := _m.Called(_a0)

	var r0 dto.Project
	if rf, ok := ret.Get(0).(func(api.UpdateProjectParam) dto.Project); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Project)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.UpdateProjectParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: _a0
func (_m *MockClient) UpdateTask(_a0 api.UpdateTaskParam) (dto.Task, error) {
	ret := _m.Called(_a0)

	var r0 dto.Task
	if rf, ok := ret.Get(0).(func(api.UpdateTaskParam) dto.Task); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.UpdateTaskParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTimeEntry provides a mock function with given fields: _a0
func (_m *MockClient) UpdateTimeEntry(_a0 api.UpdateTimeEntryParam) (dto.TimeEntryImpl, error) {
	ret := _m.Called(_a0)

	var r0 dto.TimeEntryImpl
	if rf, ok := ret.Get(0).(func(api.UpdateTimeEntryParam) dto.TimeEntryImpl); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.TimeEntryImpl)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.UpdateTimeEntryParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkspaceUsers provides a mock function with given fields: _a0
func (_m *MockClient) WorkspaceUsers(_a0 api.WorkspaceUsersParam) ([]dto.User, error) {
	ret := _m.Called(_a0)

	var r0 []dto.User
	if rf, ok := ret.Get(0).(func(api.WorkspaceUsersParam) []dto.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.WorkspaceUsersParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockClient(t mockConstructorTestingTNewMockClient) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
