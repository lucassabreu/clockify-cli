// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/lucassabreu/clockify-cli/api"
	"github.com/lucassabreu/clockify-cli/api/dto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// AddClient provides a mock function for the type MockClient
func (_mock *MockClient) AddClient(addClientParam api.AddClientParam) (dto.Client, error) {
	ret := _mock.Called(addClientParam)

	if len(ret) == 0 {
		panic("no return value specified for AddClient")
	}

	var r0 dto.Client
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.AddClientParam) (dto.Client, error)); ok {
		return returnFunc(addClientParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.AddClientParam) dto.Client); ok {
		r0 = returnFunc(addClientParam)
	} else {
		r0 = ret.Get(0).(dto.Client)
	}
	if returnFunc, ok := ret.Get(1).(func(api.AddClientParam) error); ok {
		r1 = returnFunc(addClientParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_AddClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddClient'
type MockClient_AddClient_Call struct {
	*mock.Call
}

// AddClient is a helper method to define mock.On call
//   - addClientParam api.AddClientParam
func (_e *MockClient_Expecter) AddClient(addClientParam interface{}) *MockClient_AddClient_Call {
	return &MockClient_AddClient_Call{Call: _e.mock.On("AddClient", addClientParam)}
}

func (_c *MockClient_AddClient_Call) Run(run func(addClientParam api.AddClientParam)) *MockClient_AddClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.AddClientParam
		if args[0] != nil {
			arg0 = args[0].(api.AddClientParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_AddClient_Call) Return(client dto.Client, err error) *MockClient_AddClient_Call {
	_c.Call.Return(client, err)
	return _c
}

func (_c *MockClient_AddClient_Call) RunAndReturn(run func(addClientParam api.AddClientParam) (dto.Client, error)) *MockClient_AddClient_Call {
	_c.Call.Return(run)
	return _c
}

// AddProject provides a mock function for the type MockClient
func (_mock *MockClient) AddProject(addProjectParam api.AddProjectParam) (dto.Project, error) {
	ret := _mock.Called(addProjectParam)

	if len(ret) == 0 {
		panic("no return value specified for AddProject")
	}

	var r0 dto.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.AddProjectParam) (dto.Project, error)); ok {
		return returnFunc(addProjectParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.AddProjectParam) dto.Project); ok {
		r0 = returnFunc(addProjectParam)
	} else {
		r0 = ret.Get(0).(dto.Project)
	}
	if returnFunc, ok := ret.Get(1).(func(api.AddProjectParam) error); ok {
		r1 = returnFunc(addProjectParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_AddProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProject'
type MockClient_AddProject_Call struct {
	*mock.Call
}

// AddProject is a helper method to define mock.On call
//   - addProjectParam api.AddProjectParam
func (_e *MockClient_Expecter) AddProject(addProjectParam interface{}) *MockClient_AddProject_Call {
	return &MockClient_AddProject_Call{Call: _e.mock.On("AddProject", addProjectParam)}
}

func (_c *MockClient_AddProject_Call) Run(run func(addProjectParam api.AddProjectParam)) *MockClient_AddProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.AddProjectParam
		if args[0] != nil {
			arg0 = args[0].(api.AddProjectParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_AddProject_Call) Return(project dto.Project, err error) *MockClient_AddProject_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockClient_AddProject_Call) RunAndReturn(run func(addProjectParam api.AddProjectParam) (dto.Project, error)) *MockClient_AddProject_Call {
	_c.Call.Return(run)
	return _c
}

// AddTask provides a mock function for the type MockClient
func (_mock *MockClient) AddTask(addTaskParam api.AddTaskParam) (dto.Task, error) {
	ret := _mock.Called(addTaskParam)

	if len(ret) == 0 {
		panic("no return value specified for AddTask")
	}

	var r0 dto.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.AddTaskParam) (dto.Task, error)); ok {
		return returnFunc(addTaskParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.AddTaskParam) dto.Task); ok {
		r0 = returnFunc(addTaskParam)
	} else {
		r0 = ret.Get(0).(dto.Task)
	}
	if returnFunc, ok := ret.Get(1).(func(api.AddTaskParam) error); ok {
		r1 = returnFunc(addTaskParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_AddTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTask'
type MockClient_AddTask_Call struct {
	*mock.Call
}

// AddTask is a helper method to define mock.On call
//   - addTaskParam api.AddTaskParam
func (_e *MockClient_Expecter) AddTask(addTaskParam interface{}) *MockClient_AddTask_Call {
	return &MockClient_AddTask_Call{Call: _e.mock.On("AddTask", addTaskParam)}
}

func (_c *MockClient_AddTask_Call) Run(run func(addTaskParam api.AddTaskParam)) *MockClient_AddTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.AddTaskParam
		if args[0] != nil {
			arg0 = args[0].(api.AddTaskParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_AddTask_Call) Return(task dto.Task, err error) *MockClient_AddTask_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockClient_AddTask_Call) RunAndReturn(run func(addTaskParam api.AddTaskParam) (dto.Task, error)) *MockClient_AddTask_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeInvoiced provides a mock function for the type MockClient
func (_mock *MockClient) ChangeInvoiced(changeInvoicedParam api.ChangeInvoicedParam) error {
	ret := _mock.Called(changeInvoicedParam)

	if len(ret) == 0 {
		panic("no return value specified for ChangeInvoiced")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(api.ChangeInvoicedParam) error); ok {
		r0 = returnFunc(changeInvoicedParam)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_ChangeInvoiced_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeInvoiced'
type MockClient_ChangeInvoiced_Call struct {
	*mock.Call
}

// ChangeInvoiced is a helper method to define mock.On call
//   - changeInvoicedParam api.ChangeInvoicedParam
func (_e *MockClient_Expecter) ChangeInvoiced(changeInvoicedParam interface{}) *MockClient_ChangeInvoiced_Call {
	return &MockClient_ChangeInvoiced_Call{Call: _e.mock.On("ChangeInvoiced", changeInvoicedParam)}
}

func (_c *MockClient_ChangeInvoiced_Call) Run(run func(changeInvoicedParam api.ChangeInvoicedParam)) *MockClient_ChangeInvoiced_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.ChangeInvoicedParam
		if args[0] != nil {
			arg0 = args[0].(api.ChangeInvoicedParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_ChangeInvoiced_Call) Return(err error) *MockClient_ChangeInvoiced_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_ChangeInvoiced_Call) RunAndReturn(run func(changeInvoicedParam api.ChangeInvoicedParam) error) *MockClient_ChangeInvoiced_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTimeEntry provides a mock function for the type MockClient
func (_mock *MockClient) CreateTimeEntry(createTimeEntryParam api.CreateTimeEntryParam) (dto.TimeEntryImpl, error) {
	ret := _mock.Called(createTimeEntryParam)

	if len(ret) == 0 {
		panic("no return value specified for CreateTimeEntry")
	}

	var r0 dto.TimeEntryImpl
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.CreateTimeEntryParam) (dto.TimeEntryImpl, error)); ok {
		return returnFunc(createTimeEntryParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.CreateTimeEntryParam) dto.TimeEntryImpl); ok {
		r0 = returnFunc(createTimeEntryParam)
	} else {
		r0 = ret.Get(0).(dto.TimeEntryImpl)
	}
	if returnFunc, ok := ret.Get(1).(func(api.CreateTimeEntryParam) error); ok {
		r1 = returnFunc(createTimeEntryParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_CreateTimeEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTimeEntry'
type MockClient_CreateTimeEntry_Call struct {
	*mock.Call
}

// CreateTimeEntry is a helper method to define mock.On call
//   - createTimeEntryParam api.CreateTimeEntryParam
func (_e *MockClient_Expecter) CreateTimeEntry(createTimeEntryParam interface{}) *MockClient_CreateTimeEntry_Call {
	return &MockClient_CreateTimeEntry_Call{Call: _e.mock.On("CreateTimeEntry", createTimeEntryParam)}
}

func (_c *MockClient_CreateTimeEntry_Call) Run(run func(createTimeEntryParam api.CreateTimeEntryParam)) *MockClient_CreateTimeEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.CreateTimeEntryParam
		if args[0] != nil {
			arg0 = args[0].(api.CreateTimeEntryParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_CreateTimeEntry_Call) Return(timeEntryImpl dto.TimeEntryImpl, err error) *MockClient_CreateTimeEntry_Call {
	_c.Call.Return(timeEntryImpl, err)
	return _c
}

func (_c *MockClient_CreateTimeEntry_Call) RunAndReturn(run func(createTimeEntryParam api.CreateTimeEntryParam) (dto.TimeEntryImpl, error)) *MockClient_CreateTimeEntry_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProject provides a mock function for the type MockClient
func (_mock *MockClient) DeleteProject(deleteProjectParam api.DeleteProjectParam) (dto.Project, error) {
	ret := _mock.Called(deleteProjectParam)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 dto.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.DeleteProjectParam) (dto.Project, error)); ok {
		return returnFunc(deleteProjectParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.DeleteProjectParam) dto.Project); ok {
		r0 = returnFunc(deleteProjectParam)
	} else {
		r0 = ret.Get(0).(dto.Project)
	}
	if returnFunc, ok := ret.Get(1).(func(api.DeleteProjectParam) error); ok {
		r1 = returnFunc(deleteProjectParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DeleteProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProject'
type MockClient_DeleteProject_Call struct {
	*mock.Call
}

// DeleteProject is a helper method to define mock.On call
//   - deleteProjectParam api.DeleteProjectParam
func (_e *MockClient_Expecter) DeleteProject(deleteProjectParam interface{}) *MockClient_DeleteProject_Call {
	return &MockClient_DeleteProject_Call{Call: _e.mock.On("DeleteProject", deleteProjectParam)}
}

func (_c *MockClient_DeleteProject_Call) Run(run func(deleteProjectParam api.DeleteProjectParam)) *MockClient_DeleteProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.DeleteProjectParam
		if args[0] != nil {
			arg0 = args[0].(api.DeleteProjectParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_DeleteProject_Call) Return(project dto.Project, err error) *MockClient_DeleteProject_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockClient_DeleteProject_Call) RunAndReturn(run func(deleteProjectParam api.DeleteProjectParam) (dto.Project, error)) *MockClient_DeleteProject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function for the type MockClient
func (_mock *MockClient) DeleteTask(deleteTaskParam api.DeleteTaskParam) (dto.Task, error) {
	ret := _mock.Called(deleteTaskParam)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 dto.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.DeleteTaskParam) (dto.Task, error)); ok {
		return returnFunc(deleteTaskParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.DeleteTaskParam) dto.Task); ok {
		r0 = returnFunc(deleteTaskParam)
	} else {
		r0 = ret.Get(0).(dto.Task)
	}
	if returnFunc, ok := ret.Get(1).(func(api.DeleteTaskParam) error); ok {
		r1 = returnFunc(deleteTaskParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type MockClient_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - deleteTaskParam api.DeleteTaskParam
func (_e *MockClient_Expecter) DeleteTask(deleteTaskParam interface{}) *MockClient_DeleteTask_Call {
	return &MockClient_DeleteTask_Call{Call: _e.mock.On("DeleteTask", deleteTaskParam)}
}

func (_c *MockClient_DeleteTask_Call) Run(run func(deleteTaskParam api.DeleteTaskParam)) *MockClient_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.DeleteTaskParam
		if args[0] != nil {
			arg0 = args[0].(api.DeleteTaskParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_DeleteTask_Call) Return(task dto.Task, err error) *MockClient_DeleteTask_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockClient_DeleteTask_Call) RunAndReturn(run func(deleteTaskParam api.DeleteTaskParam) (dto.Task, error)) *MockClient_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTimeEntry provides a mock function for the type MockClient
func (_mock *MockClient) DeleteTimeEntry(deleteTimeEntryParam api.DeleteTimeEntryParam) error {
	ret := _mock.Called(deleteTimeEntryParam)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTimeEntry")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(api.DeleteTimeEntryParam) error); ok {
		r0 = returnFunc(deleteTimeEntryParam)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_DeleteTimeEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTimeEntry'
type MockClient_DeleteTimeEntry_Call struct {
	*mock.Call
}

// DeleteTimeEntry is a helper method to define mock.On call
//   - deleteTimeEntryParam api.DeleteTimeEntryParam
func (_e *MockClient_Expecter) DeleteTimeEntry(deleteTimeEntryParam interface{}) *MockClient_DeleteTimeEntry_Call {
	return &MockClient_DeleteTimeEntry_Call{Call: _e.mock.On("DeleteTimeEntry", deleteTimeEntryParam)}
}

func (_c *MockClient_DeleteTimeEntry_Call) Run(run func(deleteTimeEntryParam api.DeleteTimeEntryParam)) *MockClient_DeleteTimeEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.DeleteTimeEntryParam
		if args[0] != nil {
			arg0 = args[0].(api.DeleteTimeEntryParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_DeleteTimeEntry_Call) Return(err error) *MockClient_DeleteTimeEntry_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_DeleteTimeEntry_Call) RunAndReturn(run func(deleteTimeEntryParam api.DeleteTimeEntryParam) error) *MockClient_DeleteTimeEntry_Call {
	_c.Call.Return(run)
	return _c
}

// GetClients provides a mock function for the type MockClient
func (_mock *MockClient) GetClients(getClientsParam api.GetClientsParam) ([]dto.Client, error) {
	ret := _mock.Called(getClientsParam)

	if len(ret) == 0 {
		panic("no return value specified for GetClients")
	}

	var r0 []dto.Client
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.GetClientsParam) ([]dto.Client, error)); ok {
		return returnFunc(getClientsParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.GetClientsParam) []dto.Client); ok {
		r0 = returnFunc(getClientsParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Client)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(api.GetClientsParam) error); ok {
		r1 = returnFunc(getClientsParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClients'
type MockClient_GetClients_Call struct {
	*mock.Call
}

// GetClients is a helper method to define mock.On call
//   - getClientsParam api.GetClientsParam
func (_e *MockClient_Expecter) GetClients(getClientsParam interface{}) *MockClient_GetClients_Call {
	return &MockClient_GetClients_Call{Call: _e.mock.On("GetClients", getClientsParam)}
}

func (_c *MockClient_GetClients_Call) Run(run func(getClientsParam api.GetClientsParam)) *MockClient_GetClients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.GetClientsParam
		if args[0] != nil {
			arg0 = args[0].(api.GetClientsParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_GetClients_Call) Return(clients []dto.Client, err error) *MockClient_GetClients_Call {
	_c.Call.Return(clients, err)
	return _c
}

func (_c *MockClient_GetClients_Call) RunAndReturn(run func(getClientsParam api.GetClientsParam) ([]dto.Client, error)) *MockClient_GetClients_Call {
	_c.Call.Return(run)
	return _c
}

// GetHydratedTimeEntry provides a mock function for the type MockClient
func (_mock *MockClient) GetHydratedTimeEntry(getTimeEntryParam api.GetTimeEntryParam) (*dto.TimeEntry, error) {
	ret := _mock.Called(getTimeEntryParam)

	if len(ret) == 0 {
		panic("no return value specified for GetHydratedTimeEntry")
	}

	var r0 *dto.TimeEntry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.GetTimeEntryParam) (*dto.TimeEntry, error)); ok {
		return returnFunc(getTimeEntryParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.GetTimeEntryParam) *dto.TimeEntry); ok {
		r0 = returnFunc(getTimeEntryParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TimeEntry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(api.GetTimeEntryParam) error); ok {
		r1 = returnFunc(getTimeEntryParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetHydratedTimeEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHydratedTimeEntry'
type MockClient_GetHydratedTimeEntry_Call struct {
	*mock.Call
}

// GetHydratedTimeEntry is a helper method to define mock.On call
//   - getTimeEntryParam api.GetTimeEntryParam
func (_e *MockClient_Expecter) GetHydratedTimeEntry(getTimeEntryParam interface{}) *MockClient_GetHydratedTimeEntry_Call {
	return &MockClient_GetHydratedTimeEntry_Call{Call: _e.mock.On("GetHydratedTimeEntry", getTimeEntryParam)}
}

func (_c *MockClient_GetHydratedTimeEntry_Call) Run(run func(getTimeEntryParam api.GetTimeEntryParam)) *MockClient_GetHydratedTimeEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.GetTimeEntryParam
		if args[0] != nil {
			arg0 = args[0].(api.GetTimeEntryParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_GetHydratedTimeEntry_Call) Return(timeEntry *dto.TimeEntry, err error) *MockClient_GetHydratedTimeEntry_Call {
	_c.Call.Return(timeEntry, err)
	return _c
}

func (_c *MockClient_GetHydratedTimeEntry_Call) RunAndReturn(run func(getTimeEntryParam api.GetTimeEntryParam) (*dto.TimeEntry, error)) *MockClient_GetHydratedTimeEntry_Call {
	_c.Call.Return(run)
	return _c
}

// GetHydratedTimeEntryInProgress provides a mock function for the type MockClient
func (_mock *MockClient) GetHydratedTimeEntryInProgress(getTimeEntryInProgressParam api.GetTimeEntryInProgressParam) (*dto.TimeEntry, error) {
	ret := _mock.Called(getTimeEntryInProgressParam)

	if len(ret) == 0 {
		panic("no return value specified for GetHydratedTimeEntryInProgress")
	}

	var r0 *dto.TimeEntry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.GetTimeEntryInProgressParam) (*dto.TimeEntry, error)); ok {
		return returnFunc(getTimeEntryInProgressParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.GetTimeEntryInProgressParam) *dto.TimeEntry); ok {
		r0 = returnFunc(getTimeEntryInProgressParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TimeEntry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(api.GetTimeEntryInProgressParam) error); ok {
		r1 = returnFunc(getTimeEntryInProgressParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetHydratedTimeEntryInProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHydratedTimeEntryInProgress'
type MockClient_GetHydratedTimeEntryInProgress_Call struct {
	*mock.Call
}

// GetHydratedTimeEntryInProgress is a helper method to define mock.On call
//   - getTimeEntryInProgressParam api.GetTimeEntryInProgressParam
func (_e *MockClient_Expecter) GetHydratedTimeEntryInProgress(getTimeEntryInProgressParam interface{}) *MockClient_GetHydratedTimeEntryInProgress_Call {
	return &MockClient_GetHydratedTimeEntryInProgress_Call{Call: _e.mock.On("GetHydratedTimeEntryInProgress", getTimeEntryInProgressParam)}
}

func (_c *MockClient_GetHydratedTimeEntryInProgress_Call) Run(run func(getTimeEntryInProgressParam api.GetTimeEntryInProgressParam)) *MockClient_GetHydratedTimeEntryInProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.GetTimeEntryInProgressParam
		if args[0] != nil {
			arg0 = args[0].(api.GetTimeEntryInProgressParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_GetHydratedTimeEntryInProgress_Call) Return(timeEntry *dto.TimeEntry, err error) *MockClient_GetHydratedTimeEntryInProgress_Call {
	_c.Call.Return(timeEntry, err)
	return _c
}

func (_c *MockClient_GetHydratedTimeEntryInProgress_Call) RunAndReturn(run func(getTimeEntryInProgressParam api.GetTimeEntryInProgressParam) (*dto.TimeEntry, error)) *MockClient_GetHydratedTimeEntryInProgress_Call {
	_c.Call.Return(run)
	return _c
}

// GetMe provides a mock function for the type MockClient
func (_mock *MockClient) GetMe() (dto.User, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMe")
	}

	var r0 dto.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (dto.User, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() dto.User); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(dto.User)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetMe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMe'
type MockClient_GetMe_Call struct {
	*mock.Call
}

// GetMe is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetMe() *MockClient_GetMe_Call {
	return &MockClient_GetMe_Call{Call: _e.mock.On("GetMe")}
}

func (_c *MockClient_GetMe_Call) Run(run func()) *MockClient_GetMe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetMe_Call) Return(user dto.User, err error) *MockClient_GetMe_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockClient_GetMe_Call) RunAndReturn(run func() (dto.User, error)) *MockClient_GetMe_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function for the type MockClient
func (_mock *MockClient) GetProject(getProjectParam api.GetProjectParam) (*dto.Project, error) {
	ret := _mock.Called(getProjectParam)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *dto.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.GetProjectParam) (*dto.Project, error)); ok {
		return returnFunc(getProjectParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.GetProjectParam) *dto.Project); ok {
		r0 = returnFunc(getProjectParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(api.GetProjectParam) error); ok {
		r1 = returnFunc(getProjectParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type MockClient_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - getProjectParam api.GetProjectParam
func (_e *MockClient_Expecter) GetProject(getProjectParam interface{}) *MockClient_GetProject_Call {
	return &MockClient_GetProject_Call{Call: _e.mock.On("GetProject", getProjectParam)}
}

func (_c *MockClient_GetProject_Call) Run(run func(getProjectParam api.GetProjectParam)) *MockClient_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.GetProjectParam
		if args[0] != nil {
			arg0 = args[0].(api.GetProjectParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_GetProject_Call) Return(project *dto.Project, err error) *MockClient_GetProject_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockClient_GetProject_Call) RunAndReturn(run func(getProjectParam api.GetProjectParam) (*dto.Project, error)) *MockClient_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjects provides a mock function for the type MockClient
func (_mock *MockClient) GetProjects(getProjectsParam api.GetProjectsParam) ([]dto.Project, error) {
	ret := _mock.Called(getProjectsParam)

	if len(ret) == 0 {
		panic("no return value specified for GetProjects")
	}

	var r0 []dto.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.GetProjectsParam) ([]dto.Project, error)); ok {
		return returnFunc(getProjectsParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.GetProjectsParam) []dto.Project); ok {
		r0 = returnFunc(getProjectsParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(api.GetProjectsParam) error); ok {
		r1 = returnFunc(getProjectsParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjects'
type MockClient_GetProjects_Call struct {
	*mock.Call
}

// GetProjects is a helper method to define mock.On call
//   - getProjectsParam api.GetProjectsParam
func (_e *MockClient_Expecter) GetProjects(getProjectsParam interface{}) *MockClient_GetProjects_Call {
	return &MockClient_GetProjects_Call{Call: _e.mock.On("GetProjects", getProjectsParam)}
}

func (_c *MockClient_GetProjects_Call) Run(run func(getProjectsParam api.GetProjectsParam)) *MockClient_GetProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.GetProjectsParam
		if args[0] != nil {
			arg0 = args[0].(api.GetProjectsParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_GetProjects_Call) Return(projects []dto.Project, err error) *MockClient_GetProjects_Call {
	_c.Call.Return(projects, err)
	return _c
}

func (_c *MockClient_GetProjects_Call) RunAndReturn(run func(getProjectsParam api.GetProjectsParam) ([]dto.Project, error)) *MockClient_GetProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetTag provides a mock function for the type MockClient
func (_mock *MockClient) GetTag(getTagParam api.GetTagParam) (*dto.Tag, error) {
	ret := _mock.Called(getTagParam)

	if len(ret) == 0 {
		panic("no return value specified for GetTag")
	}

	var r0 *dto.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.GetTagParam) (*dto.Tag, error)); ok {
		return returnFunc(getTagParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.GetTagParam) *dto.Tag); ok {
		r0 = returnFunc(getTagParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Tag)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(api.GetTagParam) error); ok {
		r1 = returnFunc(getTagParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTag'
type MockClient_GetTag_Call struct {
	*mock.Call
}

// GetTag is a helper method to define mock.On call
//   - getTagParam api.GetTagParam
func (_e *MockClient_Expecter) GetTag(getTagParam interface{}) *MockClient_GetTag_Call {
	return &MockClient_GetTag_Call{Call: _e.mock.On("GetTag", getTagParam)}
}

func (_c *MockClient_GetTag_Call) Run(run func(getTagParam api.GetTagParam)) *MockClient_GetTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.GetTagParam
		if args[0] != nil {
			arg0 = args[0].(api.GetTagParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_GetTag_Call) Return(tag *dto.Tag, err error) *MockClient_GetTag_Call {
	_c.Call.Return(tag, err)
	return _c
}

func (_c *MockClient_GetTag_Call) RunAndReturn(run func(getTagParam api.GetTagParam) (*dto.Tag, error)) *MockClient_GetTag_Call {
	_c.Call.Return(run)
	return _c
}

// GetTags provides a mock function for the type MockClient
func (_mock *MockClient) GetTags(getTagsParam api.GetTagsParam) ([]dto.Tag, error) {
	ret := _mock.Called(getTagsParam)

	if len(ret) == 0 {
		panic("no return value specified for GetTags")
	}

	var r0 []dto.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.GetTagsParam) ([]dto.Tag, error)); ok {
		return returnFunc(getTagsParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.GetTagsParam) []dto.Tag); ok {
		r0 = returnFunc(getTagsParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Tag)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(api.GetTagsParam) error); ok {
		r1 = returnFunc(getTagsParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTags'
type MockClient_GetTags_Call struct {
	*mock.Call
}

// GetTags is a helper method to define mock.On call
//   - getTagsParam api.GetTagsParam
func (_e *MockClient_Expecter) GetTags(getTagsParam interface{}) *MockClient_GetTags_Call {
	return &MockClient_GetTags_Call{Call: _e.mock.On("GetTags", getTagsParam)}
}

func (_c *MockClient_GetTags_Call) Run(run func(getTagsParam api.GetTagsParam)) *MockClient_GetTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.GetTagsParam
		if args[0] != nil {
			arg0 = args[0].(api.GetTagsParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_GetTags_Call) Return(tags []dto.Tag, err error) *MockClient_GetTags_Call {
	_c.Call.Return(tags, err)
	return _c
}

func (_c *MockClient_GetTags_Call) RunAndReturn(run func(getTagsParam api.GetTagsParam) ([]dto.Tag, error)) *MockClient_GetTags_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function for the type MockClient
func (_mock *MockClient) GetTask(getTaskParam api.GetTaskParam) (dto.Task, error) {
	ret := _mock.Called(getTaskParam)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 dto.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.GetTaskParam) (dto.Task, error)); ok {
		return returnFunc(getTaskParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.GetTaskParam) dto.Task); ok {
		r0 = returnFunc(getTaskParam)
	} else {
		r0 = ret.Get(0).(dto.Task)
	}
	if returnFunc, ok := ret.Get(1).(func(api.GetTaskParam) error); ok {
		r1 = returnFunc(getTaskParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type MockClient_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - getTaskParam api.GetTaskParam
func (_e *MockClient_Expecter) GetTask(getTaskParam interface{}) *MockClient_GetTask_Call {
	return &MockClient_GetTask_Call{Call: _e.mock.On("GetTask", getTaskParam)}
}

func (_c *MockClient_GetTask_Call) Run(run func(getTaskParam api.GetTaskParam)) *MockClient_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.GetTaskParam
		if args[0] != nil {
			arg0 = args[0].(api.GetTaskParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_GetTask_Call) Return(task dto.Task, err error) *MockClient_GetTask_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockClient_GetTask_Call) RunAndReturn(run func(getTaskParam api.GetTaskParam) (dto.Task, error)) *MockClient_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasks provides a mock function for the type MockClient
func (_mock *MockClient) GetTasks(getTasksParam api.GetTasksParam) ([]dto.Task, error) {
	ret := _mock.Called(getTasksParam)

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 []dto.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.GetTasksParam) ([]dto.Task, error)); ok {
		return returnFunc(getTasksParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.GetTasksParam) []dto.Task); ok {
		r0 = returnFunc(getTasksParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(api.GetTasksParam) error); ok {
		r1 = returnFunc(getTasksParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasks'
type MockClient_GetTasks_Call struct {
	*mock.Call
}

// GetTasks is a helper method to define mock.On call
//   - getTasksParam api.GetTasksParam
func (_e *MockClient_Expecter) GetTasks(getTasksParam interface{}) *MockClient_GetTasks_Call {
	return &MockClient_GetTasks_Call{Call: _e.mock.On("GetTasks", getTasksParam)}
}

func (_c *MockClient_GetTasks_Call) Run(run func(getTasksParam api.GetTasksParam)) *MockClient_GetTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.GetTasksParam
		if args[0] != nil {
			arg0 = args[0].(api.GetTasksParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_GetTasks_Call) Return(tasks []dto.Task, err error) *MockClient_GetTasks_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *MockClient_GetTasks_Call) RunAndReturn(run func(getTasksParam api.GetTasksParam) ([]dto.Task, error)) *MockClient_GetTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetTimeEntry provides a mock function for the type MockClient
func (_mock *MockClient) GetTimeEntry(getTimeEntryParam api.GetTimeEntryParam) (*dto.TimeEntryImpl, error) {
	ret := _mock.Called(getTimeEntryParam)

	if len(ret) == 0 {
		panic("no return value specified for GetTimeEntry")
	}

	var r0 *dto.TimeEntryImpl
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.GetTimeEntryParam) (*dto.TimeEntryImpl, error)); ok {
		return returnFunc(getTimeEntryParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.GetTimeEntryParam) *dto.TimeEntryImpl); ok {
		r0 = returnFunc(getTimeEntryParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TimeEntryImpl)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(api.GetTimeEntryParam) error); ok {
		r1 = returnFunc(getTimeEntryParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetTimeEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTimeEntry'
type MockClient_GetTimeEntry_Call struct {
	*mock.Call
}

// GetTimeEntry is a helper method to define mock.On call
//   - getTimeEntryParam api.GetTimeEntryParam
func (_e *MockClient_Expecter) GetTimeEntry(getTimeEntryParam interface{}) *MockClient_GetTimeEntry_Call {
	return &MockClient_GetTimeEntry_Call{Call: _e.mock.On("GetTimeEntry", getTimeEntryParam)}
}

func (_c *MockClient_GetTimeEntry_Call) Run(run func(getTimeEntryParam api.GetTimeEntryParam)) *MockClient_GetTimeEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.GetTimeEntryParam
		if args[0] != nil {
			arg0 = args[0].(api.GetTimeEntryParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_GetTimeEntry_Call) Return(timeEntryImpl *dto.TimeEntryImpl, err error) *MockClient_GetTimeEntry_Call {
	_c.Call.Return(timeEntryImpl, err)
	return _c
}

func (_c *MockClient_GetTimeEntry_Call) RunAndReturn(run func(getTimeEntryParam api.GetTimeEntryParam) (*dto.TimeEntryImpl, error)) *MockClient_GetTimeEntry_Call {
	_c.Call.Return(run)
	return _c
}

// GetTimeEntryInProgress provides a mock function for the type MockClient
func (_mock *MockClient) GetTimeEntryInProgress(getTimeEntryInProgressParam api.GetTimeEntryInProgressParam) (*dto.TimeEntryImpl, error) {
	ret := _mock.Called(getTimeEntryInProgressParam)

	if len(ret) == 0 {
		panic("no return value specified for GetTimeEntryInProgress")
	}

	var r0 *dto.TimeEntryImpl
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.GetTimeEntryInProgressParam) (*dto.TimeEntryImpl, error)); ok {
		return returnFunc(getTimeEntryInProgressParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.GetTimeEntryInProgressParam) *dto.TimeEntryImpl); ok {
		r0 = returnFunc(getTimeEntryInProgressParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TimeEntryImpl)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(api.GetTimeEntryInProgressParam) error); ok {
		r1 = returnFunc(getTimeEntryInProgressParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetTimeEntryInProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTimeEntryInProgress'
type MockClient_GetTimeEntryInProgress_Call struct {
	*mock.Call
}

// GetTimeEntryInProgress is a helper method to define mock.On call
//   - getTimeEntryInProgressParam api.GetTimeEntryInProgressParam
func (_e *MockClient_Expecter) GetTimeEntryInProgress(getTimeEntryInProgressParam interface{}) *MockClient_GetTimeEntryInProgress_Call {
	return &MockClient_GetTimeEntryInProgress_Call{Call: _e.mock.On("GetTimeEntryInProgress", getTimeEntryInProgressParam)}
}

func (_c *MockClient_GetTimeEntryInProgress_Call) Run(run func(getTimeEntryInProgressParam api.GetTimeEntryInProgressParam)) *MockClient_GetTimeEntryInProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.GetTimeEntryInProgressParam
		if args[0] != nil {
			arg0 = args[0].(api.GetTimeEntryInProgressParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_GetTimeEntryInProgress_Call) Return(timeEntryImpl *dto.TimeEntryImpl, err error) *MockClient_GetTimeEntryInProgress_Call {
	_c.Call.Return(timeEntryImpl, err)
	return _c
}

func (_c *MockClient_GetTimeEntryInProgress_Call) RunAndReturn(run func(getTimeEntryInProgressParam api.GetTimeEntryInProgressParam) (*dto.TimeEntryImpl, error)) *MockClient_GetTimeEntryInProgress_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockClient
func (_mock *MockClient) GetUser(getUser api.GetUser) (dto.User, error) {
	ret := _mock.Called(getUser)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 dto.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.GetUser) (dto.User, error)); ok {
		return returnFunc(getUser)
	}
	if returnFunc, ok := ret.Get(0).(func(api.GetUser) dto.User); ok {
		r0 = returnFunc(getUser)
	} else {
		r0 = ret.Get(0).(dto.User)
	}
	if returnFunc, ok := ret.Get(1).(func(api.GetUser) error); ok {
		r1 = returnFunc(getUser)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockClient_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - getUser api.GetUser
func (_e *MockClient_Expecter) GetUser(getUser interface{}) *MockClient_GetUser_Call {
	return &MockClient_GetUser_Call{Call: _e.mock.On("GetUser", getUser)}
}

func (_c *MockClient_GetUser_Call) Run(run func(getUser api.GetUser)) *MockClient_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.GetUser
		if args[0] != nil {
			arg0 = args[0].(api.GetUser)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_GetUser_Call) Return(user dto.User, err error) *MockClient_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockClient_GetUser_Call) RunAndReturn(run func(getUser api.GetUser) (dto.User, error)) *MockClient_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserTimeEntries provides a mock function for the type MockClient
func (_mock *MockClient) GetUserTimeEntries(getUserTimeEntriesParam api.GetUserTimeEntriesParam) ([]dto.TimeEntryImpl, error) {
	ret := _mock.Called(getUserTimeEntriesParam)

	if len(ret) == 0 {
		panic("no return value specified for GetUserTimeEntries")
	}

	var r0 []dto.TimeEntryImpl
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.GetUserTimeEntriesParam) ([]dto.TimeEntryImpl, error)); ok {
		return returnFunc(getUserTimeEntriesParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.GetUserTimeEntriesParam) []dto.TimeEntryImpl); ok {
		r0 = returnFunc(getUserTimeEntriesParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.TimeEntryImpl)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(api.GetUserTimeEntriesParam) error); ok {
		r1 = returnFunc(getUserTimeEntriesParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetUserTimeEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserTimeEntries'
type MockClient_GetUserTimeEntries_Call struct {
	*mock.Call
}

// GetUserTimeEntries is a helper method to define mock.On call
//   - getUserTimeEntriesParam api.GetUserTimeEntriesParam
func (_e *MockClient_Expecter) GetUserTimeEntries(getUserTimeEntriesParam interface{}) *MockClient_GetUserTimeEntries_Call {
	return &MockClient_GetUserTimeEntries_Call{Call: _e.mock.On("GetUserTimeEntries", getUserTimeEntriesParam)}
}

func (_c *MockClient_GetUserTimeEntries_Call) Run(run func(getUserTimeEntriesParam api.GetUserTimeEntriesParam)) *MockClient_GetUserTimeEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.GetUserTimeEntriesParam
		if args[0] != nil {
			arg0 = args[0].(api.GetUserTimeEntriesParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_GetUserTimeEntries_Call) Return(timeEntryImpls []dto.TimeEntryImpl, err error) *MockClient_GetUserTimeEntries_Call {
	_c.Call.Return(timeEntryImpls, err)
	return _c
}

func (_c *MockClient_GetUserTimeEntries_Call) RunAndReturn(run func(getUserTimeEntriesParam api.GetUserTimeEntriesParam) ([]dto.TimeEntryImpl, error)) *MockClient_GetUserTimeEntries_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersHydratedTimeEntries provides a mock function for the type MockClient
func (_mock *MockClient) GetUsersHydratedTimeEntries(getUserTimeEntriesParam api.GetUserTimeEntriesParam) ([]dto.TimeEntry, error) {
	ret := _mock.Called(getUserTimeEntriesParam)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersHydratedTimeEntries")
	}

	var r0 []dto.TimeEntry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.GetUserTimeEntriesParam) ([]dto.TimeEntry, error)); ok {
		return returnFunc(getUserTimeEntriesParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.GetUserTimeEntriesParam) []dto.TimeEntry); ok {
		r0 = returnFunc(getUserTimeEntriesParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.TimeEntry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(api.GetUserTimeEntriesParam) error); ok {
		r1 = returnFunc(getUserTimeEntriesParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetUsersHydratedTimeEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersHydratedTimeEntries'
type MockClient_GetUsersHydratedTimeEntries_Call struct {
	*mock.Call
}

// GetUsersHydratedTimeEntries is a helper method to define mock.On call
//   - getUserTimeEntriesParam api.GetUserTimeEntriesParam
func (_e *MockClient_Expecter) GetUsersHydratedTimeEntries(getUserTimeEntriesParam interface{}) *MockClient_GetUsersHydratedTimeEntries_Call {
	return &MockClient_GetUsersHydratedTimeEntries_Call{Call: _e.mock.On("GetUsersHydratedTimeEntries", getUserTimeEntriesParam)}
}

func (_c *MockClient_GetUsersHydratedTimeEntries_Call) Run(run func(getUserTimeEntriesParam api.GetUserTimeEntriesParam)) *MockClient_GetUsersHydratedTimeEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.GetUserTimeEntriesParam
		if args[0] != nil {
			arg0 = args[0].(api.GetUserTimeEntriesParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_GetUsersHydratedTimeEntries_Call) Return(timeEntrys []dto.TimeEntry, err error) *MockClient_GetUsersHydratedTimeEntries_Call {
	_c.Call.Return(timeEntrys, err)
	return _c
}

func (_c *MockClient_GetUsersHydratedTimeEntries_Call) RunAndReturn(run func(getUserTimeEntriesParam api.GetUserTimeEntriesParam) ([]dto.TimeEntry, error)) *MockClient_GetUsersHydratedTimeEntries_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspace provides a mock function for the type MockClient
func (_mock *MockClient) GetWorkspace(getWorkspace api.GetWorkspace) (dto.Workspace, error) {
	ret := _mock.Called(getWorkspace)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspace")
	}

	var r0 dto.Workspace
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.GetWorkspace) (dto.Workspace, error)); ok {
		return returnFunc(getWorkspace)
	}
	if returnFunc, ok := ret.Get(0).(func(api.GetWorkspace) dto.Workspace); ok {
		r0 = returnFunc(getWorkspace)
	} else {
		r0 = ret.Get(0).(dto.Workspace)
	}
	if returnFunc, ok := ret.Get(1).(func(api.GetWorkspace) error); ok {
		r1 = returnFunc(getWorkspace)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspace'
type MockClient_GetWorkspace_Call struct {
	*mock.Call
}

// GetWorkspace is a helper method to define mock.On call
//   - getWorkspace api.GetWorkspace
func (_e *MockClient_Expecter) GetWorkspace(getWorkspace interface{}) *MockClient_GetWorkspace_Call {
	return &MockClient_GetWorkspace_Call{Call: _e.mock.On("GetWorkspace", getWorkspace)}
}

func (_c *MockClient_GetWorkspace_Call) Run(run func(getWorkspace api.GetWorkspace)) *MockClient_GetWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.GetWorkspace
		if args[0] != nil {
			arg0 = args[0].(api.GetWorkspace)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_GetWorkspace_Call) Return(workspace dto.Workspace, err error) *MockClient_GetWorkspace_Call {
	_c.Call.Return(workspace, err)
	return _c
}

func (_c *MockClient_GetWorkspace_Call) RunAndReturn(run func(getWorkspace api.GetWorkspace) (dto.Workspace, error)) *MockClient_GetWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaces provides a mock function for the type MockClient
func (_mock *MockClient) GetWorkspaces(getWorkspaces api.GetWorkspaces) ([]dto.Workspace, error) {
	ret := _mock.Called(getWorkspaces)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaces")
	}

	var r0 []dto.Workspace
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.GetWorkspaces) ([]dto.Workspace, error)); ok {
		return returnFunc(getWorkspaces)
	}
	if returnFunc, ok := ret.Get(0).(func(api.GetWorkspaces) []dto.Workspace); ok {
		r0 = returnFunc(getWorkspaces)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Workspace)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(api.GetWorkspaces) error); ok {
		r1 = returnFunc(getWorkspaces)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetWorkspaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaces'
type MockClient_GetWorkspaces_Call struct {
	*mock.Call
}

// GetWorkspaces is a helper method to define mock.On call
//   - getWorkspaces api.GetWorkspaces
func (_e *MockClient_Expecter) GetWorkspaces(getWorkspaces interface{}) *MockClient_GetWorkspaces_Call {
	return &MockClient_GetWorkspaces_Call{Call: _e.mock.On("GetWorkspaces", getWorkspaces)}
}

func (_c *MockClient_GetWorkspaces_Call) Run(run func(getWorkspaces api.GetWorkspaces)) *MockClient_GetWorkspaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.GetWorkspaces
		if args[0] != nil {
			arg0 = args[0].(api.GetWorkspaces)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_GetWorkspaces_Call) Return(workspaces []dto.Workspace, err error) *MockClient_GetWorkspaces_Call {
	_c.Call.Return(workspaces, err)
	return _c
}

func (_c *MockClient_GetWorkspaces_Call) RunAndReturn(run func(getWorkspaces api.GetWorkspaces) ([]dto.Workspace, error)) *MockClient_GetWorkspaces_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function for the type MockClient
func (_mock *MockClient) Log(logParam api.LogParam) ([]dto.TimeEntry, error) {
	ret := _mock.Called(logParam)

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 []dto.TimeEntry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.LogParam) ([]dto.TimeEntry, error)); ok {
		return returnFunc(logParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.LogParam) []dto.TimeEntry); ok {
		r0 = returnFunc(logParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.TimeEntry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(api.LogParam) error); ok {
		r1 = returnFunc(logParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type MockClient_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - logParam api.LogParam
func (_e *MockClient_Expecter) Log(logParam interface{}) *MockClient_Log_Call {
	return &MockClient_Log_Call{Call: _e.mock.On("Log", logParam)}
}

func (_c *MockClient_Log_Call) Run(run func(logParam api.LogParam)) *MockClient_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.LogParam
		if args[0] != nil {
			arg0 = args[0].(api.LogParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_Log_Call) Return(timeEntrys []dto.TimeEntry, err error) *MockClient_Log_Call {
	_c.Call.Return(timeEntrys, err)
	return _c
}

func (_c *MockClient_Log_Call) RunAndReturn(run func(logParam api.LogParam) ([]dto.TimeEntry, error)) *MockClient_Log_Call {
	_c.Call.Return(run)
	return _c
}

// LogRange provides a mock function for the type MockClient
func (_mock *MockClient) LogRange(logRangeParam api.LogRangeParam) ([]dto.TimeEntry, error) {
	ret := _mock.Called(logRangeParam)

	if len(ret) == 0 {
		panic("no return value specified for LogRange")
	}

	var r0 []dto.TimeEntry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.LogRangeParam) ([]dto.TimeEntry, error)); ok {
		return returnFunc(logRangeParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.LogRangeParam) []dto.TimeEntry); ok {
		r0 = returnFunc(logRangeParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.TimeEntry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(api.LogRangeParam) error); ok {
		r1 = returnFunc(logRangeParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_LogRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogRange'
type MockClient_LogRange_Call struct {
	*mock.Call
}

// LogRange is a helper method to define mock.On call
//   - logRangeParam api.LogRangeParam
func (_e *MockClient_Expecter) LogRange(logRangeParam interface{}) *MockClient_LogRange_Call {
	return &MockClient_LogRange_Call{Call: _e.mock.On("LogRange", logRangeParam)}
}

func (_c *MockClient_LogRange_Call) Run(run func(logRangeParam api.LogRangeParam)) *MockClient_LogRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.LogRangeParam
		if args[0] != nil {
			arg0 = args[0].(api.LogRangeParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_LogRange_Call) Return(timeEntrys []dto.TimeEntry, err error) *MockClient_LogRange_Call {
	_c.Call.Return(timeEntrys, err)
	return _c
}

func (_c *MockClient_LogRange_Call) RunAndReturn(run func(logRangeParam api.LogRangeParam) ([]dto.TimeEntry, error)) *MockClient_LogRange_Call {
	_c.Call.Return(run)
	return _c
}

// Out provides a mock function for the type MockClient
func (_mock *MockClient) Out(outParam api.OutParam) error {
	ret := _mock.Called(outParam)

	if len(ret) == 0 {
		panic("no return value specified for Out")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(api.OutParam) error); ok {
		r0 = returnFunc(outParam)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_Out_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Out'
type MockClient_Out_Call struct {
	*mock.Call
}

// Out is a helper method to define mock.On call
//   - outParam api.OutParam
func (_e *MockClient_Expecter) Out(outParam interface{}) *MockClient_Out_Call {
	return &MockClient_Out_Call{Call: _e.mock.On("Out", outParam)}
}

func (_c *MockClient_Out_Call) Run(run func(outParam api.OutParam)) *MockClient_Out_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.OutParam
		if args[0] != nil {
			arg0 = args[0].(api.OutParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_Out_Call) Return(err error) *MockClient_Out_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_Out_Call) RunAndReturn(run func(outParam api.OutParam) error) *MockClient_Out_Call {
	_c.Call.Return(run)
	return _c
}

// SetDebugLogger provides a mock function for the type MockClient
func (_mock *MockClient) SetDebugLogger(logger api.Logger) api.Client {
	ret := _mock.Called(logger)

	if len(ret) == 0 {
		panic("no return value specified for SetDebugLogger")
	}

	var r0 api.Client
	if returnFunc, ok := ret.Get(0).(func(api.Logger) api.Client); ok {
		r0 = returnFunc(logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.Client)
		}
	}
	return r0
}

// MockClient_SetDebugLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDebugLogger'
type MockClient_SetDebugLogger_Call struct {
	*mock.Call
}

// SetDebugLogger is a helper method to define mock.On call
//   - logger api.Logger
func (_e *MockClient_Expecter) SetDebugLogger(logger interface{}) *MockClient_SetDebugLogger_Call {
	return &MockClient_SetDebugLogger_Call{Call: _e.mock.On("SetDebugLogger", logger)}
}

func (_c *MockClient_SetDebugLogger_Call) Run(run func(logger api.Logger)) *MockClient_SetDebugLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.Logger
		if args[0] != nil {
			arg0 = args[0].(api.Logger)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_SetDebugLogger_Call) Return(client api.Client) *MockClient_SetDebugLogger_Call {
	_c.Call.Return(client)
	return _c
}

func (_c *MockClient_SetDebugLogger_Call) RunAndReturn(run func(logger api.Logger) api.Client) *MockClient_SetDebugLogger_Call {
	_c.Call.Return(run)
	return _c
}

// SetInfoLogger provides a mock function for the type MockClient
func (_mock *MockClient) SetInfoLogger(logger api.Logger) api.Client {
	ret := _mock.Called(logger)

	if len(ret) == 0 {
		panic("no return value specified for SetInfoLogger")
	}

	var r0 api.Client
	if returnFunc, ok := ret.Get(0).(func(api.Logger) api.Client); ok {
		r0 = returnFunc(logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.Client)
		}
	}
	return r0
}

// MockClient_SetInfoLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetInfoLogger'
type MockClient_SetInfoLogger_Call struct {
	*mock.Call
}

// SetInfoLogger is a helper method to define mock.On call
//   - logger api.Logger
func (_e *MockClient_Expecter) SetInfoLogger(logger interface{}) *MockClient_SetInfoLogger_Call {
	return &MockClient_SetInfoLogger_Call{Call: _e.mock.On("SetInfoLogger", logger)}
}

func (_c *MockClient_SetInfoLogger_Call) Run(run func(logger api.Logger)) *MockClient_SetInfoLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.Logger
		if args[0] != nil {
			arg0 = args[0].(api.Logger)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_SetInfoLogger_Call) Return(client api.Client) *MockClient_SetInfoLogger_Call {
	_c.Call.Return(client)
	return _c
}

func (_c *MockClient_SetInfoLogger_Call) RunAndReturn(run func(logger api.Logger) api.Client) *MockClient_SetInfoLogger_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProject provides a mock function for the type MockClient
func (_mock *MockClient) UpdateProject(updateProjectParam api.UpdateProjectParam) (dto.Project, error) {
	ret := _mock.Called(updateProjectParam)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 dto.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.UpdateProjectParam) (dto.Project, error)); ok {
		return returnFunc(updateProjectParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.UpdateProjectParam) dto.Project); ok {
		r0 = returnFunc(updateProjectParam)
	} else {
		r0 = ret.Get(0).(dto.Project)
	}
	if returnFunc, ok := ret.Get(1).(func(api.UpdateProjectParam) error); ok {
		r1 = returnFunc(updateProjectParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_UpdateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProject'
type MockClient_UpdateProject_Call struct {
	*mock.Call
}

// UpdateProject is a helper method to define mock.On call
//   - updateProjectParam api.UpdateProjectParam
func (_e *MockClient_Expecter) UpdateProject(updateProjectParam interface{}) *MockClient_UpdateProject_Call {
	return &MockClient_UpdateProject_Call{Call: _e.mock.On("UpdateProject", updateProjectParam)}
}

func (_c *MockClient_UpdateProject_Call) Run(run func(updateProjectParam api.UpdateProjectParam)) *MockClient_UpdateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.UpdateProjectParam
		if args[0] != nil {
			arg0 = args[0].(api.UpdateProjectParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_UpdateProject_Call) Return(project dto.Project, err error) *MockClient_UpdateProject_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockClient_UpdateProject_Call) RunAndReturn(run func(updateProjectParam api.UpdateProjectParam) (dto.Project, error)) *MockClient_UpdateProject_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectEstimate provides a mock function for the type MockClient
func (_mock *MockClient) UpdateProjectEstimate(updateProjectEstimateParam api.UpdateProjectEstimateParam) (dto.Project, error) {
	ret := _mock.Called(updateProjectEstimateParam)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectEstimate")
	}

	var r0 dto.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.UpdateProjectEstimateParam) (dto.Project, error)); ok {
		return returnFunc(updateProjectEstimateParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.UpdateProjectEstimateParam) dto.Project); ok {
		r0 = returnFunc(updateProjectEstimateParam)
	} else {
		r0 = ret.Get(0).(dto.Project)
	}
	if returnFunc, ok := ret.Get(1).(func(api.UpdateProjectEstimateParam) error); ok {
		r1 = returnFunc(updateProjectEstimateParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_UpdateProjectEstimate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectEstimate'
type MockClient_UpdateProjectEstimate_Call struct {
	*mock.Call
}

// UpdateProjectEstimate is a helper method to define mock.On call
//   - updateProjectEstimateParam api.UpdateProjectEstimateParam
func (_e *MockClient_Expecter) UpdateProjectEstimate(updateProjectEstimateParam interface{}) *MockClient_UpdateProjectEstimate_Call {
	return &MockClient_UpdateProjectEstimate_Call{Call: _e.mock.On("UpdateProjectEstimate", updateProjectEstimateParam)}
}

func (_c *MockClient_UpdateProjectEstimate_Call) Run(run func(updateProjectEstimateParam api.UpdateProjectEstimateParam)) *MockClient_UpdateProjectEstimate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.UpdateProjectEstimateParam
		if args[0] != nil {
			arg0 = args[0].(api.UpdateProjectEstimateParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_UpdateProjectEstimate_Call) Return(project dto.Project, err error) *MockClient_UpdateProjectEstimate_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockClient_UpdateProjectEstimate_Call) RunAndReturn(run func(updateProjectEstimateParam api.UpdateProjectEstimateParam) (dto.Project, error)) *MockClient_UpdateProjectEstimate_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectMemberships provides a mock function for the type MockClient
func (_mock *MockClient) UpdateProjectMemberships(updateProjectMembershipsParam api.UpdateProjectMembershipsParam) (dto.Project, error) {
	ret := _mock.Called(updateProjectMembershipsParam)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectMemberships")
	}

	var r0 dto.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.UpdateProjectMembershipsParam) (dto.Project, error)); ok {
		return returnFunc(updateProjectMembershipsParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.UpdateProjectMembershipsParam) dto.Project); ok {
		r0 = returnFunc(updateProjectMembershipsParam)
	} else {
		r0 = ret.Get(0).(dto.Project)
	}
	if returnFunc, ok := ret.Get(1).(func(api.UpdateProjectMembershipsParam) error); ok {
		r1 = returnFunc(updateProjectMembershipsParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_UpdateProjectMemberships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectMemberships'
type MockClient_UpdateProjectMemberships_Call struct {
	*mock.Call
}

// UpdateProjectMemberships is a helper method to define mock.On call
//   - updateProjectMembershipsParam api.UpdateProjectMembershipsParam
func (_e *MockClient_Expecter) UpdateProjectMemberships(updateProjectMembershipsParam interface{}) *MockClient_UpdateProjectMemberships_Call {
	return &MockClient_UpdateProjectMemberships_Call{Call: _e.mock.On("UpdateProjectMemberships", updateProjectMembershipsParam)}
}

func (_c *MockClient_UpdateProjectMemberships_Call) Run(run func(updateProjectMembershipsParam api.UpdateProjectMembershipsParam)) *MockClient_UpdateProjectMemberships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.UpdateProjectMembershipsParam
		if args[0] != nil {
			arg0 = args[0].(api.UpdateProjectMembershipsParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_UpdateProjectMemberships_Call) Return(project dto.Project, err error) *MockClient_UpdateProjectMemberships_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockClient_UpdateProjectMemberships_Call) RunAndReturn(run func(updateProjectMembershipsParam api.UpdateProjectMembershipsParam) (dto.Project, error)) *MockClient_UpdateProjectMemberships_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectTemplate provides a mock function for the type MockClient
func (_mock *MockClient) UpdateProjectTemplate(updateProjectTemplateParam api.UpdateProjectTemplateParam) (dto.Project, error) {
	ret := _mock.Called(updateProjectTemplateParam)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectTemplate")
	}

	var r0 dto.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.UpdateProjectTemplateParam) (dto.Project, error)); ok {
		return returnFunc(updateProjectTemplateParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.UpdateProjectTemplateParam) dto.Project); ok {
		r0 = returnFunc(updateProjectTemplateParam)
	} else {
		r0 = ret.Get(0).(dto.Project)
	}
	if returnFunc, ok := ret.Get(1).(func(api.UpdateProjectTemplateParam) error); ok {
		r1 = returnFunc(updateProjectTemplateParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_UpdateProjectTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectTemplate'
type MockClient_UpdateProjectTemplate_Call struct {
	*mock.Call
}

// UpdateProjectTemplate is a helper method to define mock.On call
//   - updateProjectTemplateParam api.UpdateProjectTemplateParam
func (_e *MockClient_Expecter) UpdateProjectTemplate(updateProjectTemplateParam interface{}) *MockClient_UpdateProjectTemplate_Call {
	return &MockClient_UpdateProjectTemplate_Call{Call: _e.mock.On("UpdateProjectTemplate", updateProjectTemplateParam)}
}

func (_c *MockClient_UpdateProjectTemplate_Call) Run(run func(updateProjectTemplateParam api.UpdateProjectTemplateParam)) *MockClient_UpdateProjectTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.UpdateProjectTemplateParam
		if args[0] != nil {
			arg0 = args[0].(api.UpdateProjectTemplateParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_UpdateProjectTemplate_Call) Return(project dto.Project, err error) *MockClient_UpdateProjectTemplate_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockClient_UpdateProjectTemplate_Call) RunAndReturn(run func(updateProjectTemplateParam api.UpdateProjectTemplateParam) (dto.Project, error)) *MockClient_UpdateProjectTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectUserBillableRate provides a mock function for the type MockClient
func (_mock *MockClient) UpdateProjectUserBillableRate(updateProjectUserRateParam api.UpdateProjectUserRateParam) (dto.Project, error) {
	ret := _mock.Called(updateProjectUserRateParam)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectUserBillableRate")
	}

	var r0 dto.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.UpdateProjectUserRateParam) (dto.Project, error)); ok {
		return returnFunc(updateProjectUserRateParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.UpdateProjectUserRateParam) dto.Project); ok {
		r0 = returnFunc(updateProjectUserRateParam)
	} else {
		r0 = ret.Get(0).(dto.Project)
	}
	if returnFunc, ok := ret.Get(1).(func(api.UpdateProjectUserRateParam) error); ok {
		r1 = returnFunc(updateProjectUserRateParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_UpdateProjectUserBillableRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectUserBillableRate'
type MockClient_UpdateProjectUserBillableRate_Call struct {
	*mock.Call
}

// UpdateProjectUserBillableRate is a helper method to define mock.On call
//   - updateProjectUserRateParam api.UpdateProjectUserRateParam
func (_e *MockClient_Expecter) UpdateProjectUserBillableRate(updateProjectUserRateParam interface{}) *MockClient_UpdateProjectUserBillableRate_Call {
	return &MockClient_UpdateProjectUserBillableRate_Call{Call: _e.mock.On("UpdateProjectUserBillableRate", updateProjectUserRateParam)}
}

func (_c *MockClient_UpdateProjectUserBillableRate_Call) Run(run func(updateProjectUserRateParam api.UpdateProjectUserRateParam)) *MockClient_UpdateProjectUserBillableRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.UpdateProjectUserRateParam
		if args[0] != nil {
			arg0 = args[0].(api.UpdateProjectUserRateParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_UpdateProjectUserBillableRate_Call) Return(project dto.Project, err error) *MockClient_UpdateProjectUserBillableRate_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockClient_UpdateProjectUserBillableRate_Call) RunAndReturn(run func(updateProjectUserRateParam api.UpdateProjectUserRateParam) (dto.Project, error)) *MockClient_UpdateProjectUserBillableRate_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectUserCostRate provides a mock function for the type MockClient
func (_mock *MockClient) UpdateProjectUserCostRate(updateProjectUserRateParam api.UpdateProjectUserRateParam) (dto.Project, error) {
	ret := _mock.Called(updateProjectUserRateParam)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectUserCostRate")
	}

	var r0 dto.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.UpdateProjectUserRateParam) (dto.Project, error)); ok {
		return returnFunc(updateProjectUserRateParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.UpdateProjectUserRateParam) dto.Project); ok {
		r0 = returnFunc(updateProjectUserRateParam)
	} else {
		r0 = ret.Get(0).(dto.Project)
	}
	if returnFunc, ok := ret.Get(1).(func(api.UpdateProjectUserRateParam) error); ok {
		r1 = returnFunc(updateProjectUserRateParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_UpdateProjectUserCostRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectUserCostRate'
type MockClient_UpdateProjectUserCostRate_Call struct {
	*mock.Call
}

// UpdateProjectUserCostRate is a helper method to define mock.On call
//   - updateProjectUserRateParam api.UpdateProjectUserRateParam
func (_e *MockClient_Expecter) UpdateProjectUserCostRate(updateProjectUserRateParam interface{}) *MockClient_UpdateProjectUserCostRate_Call {
	return &MockClient_UpdateProjectUserCostRate_Call{Call: _e.mock.On("UpdateProjectUserCostRate", updateProjectUserRateParam)}
}

func (_c *MockClient_UpdateProjectUserCostRate_Call) Run(run func(updateProjectUserRateParam api.UpdateProjectUserRateParam)) *MockClient_UpdateProjectUserCostRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.UpdateProjectUserRateParam
		if args[0] != nil {
			arg0 = args[0].(api.UpdateProjectUserRateParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_UpdateProjectUserCostRate_Call) Return(project dto.Project, err error) *MockClient_UpdateProjectUserCostRate_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockClient_UpdateProjectUserCostRate_Call) RunAndReturn(run func(updateProjectUserRateParam api.UpdateProjectUserRateParam) (dto.Project, error)) *MockClient_UpdateProjectUserCostRate_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTask provides a mock function for the type MockClient
func (_mock *MockClient) UpdateTask(updateTaskParam api.UpdateTaskParam) (dto.Task, error) {
	ret := _mock.Called(updateTaskParam)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 dto.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.UpdateTaskParam) (dto.Task, error)); ok {
		return returnFunc(updateTaskParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.UpdateTaskParam) dto.Task); ok {
		r0 = returnFunc(updateTaskParam)
	} else {
		r0 = ret.Get(0).(dto.Task)
	}
	if returnFunc, ok := ret.Get(1).(func(api.UpdateTaskParam) error); ok {
		r1 = returnFunc(updateTaskParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_UpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTask'
type MockClient_UpdateTask_Call struct {
	*mock.Call
}

// UpdateTask is a helper method to define mock.On call
//   - updateTaskParam api.UpdateTaskParam
func (_e *MockClient_Expecter) UpdateTask(updateTaskParam interface{}) *MockClient_UpdateTask_Call {
	return &MockClient_UpdateTask_Call{Call: _e.mock.On("UpdateTask", updateTaskParam)}
}

func (_c *MockClient_UpdateTask_Call) Run(run func(updateTaskParam api.UpdateTaskParam)) *MockClient_UpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.UpdateTaskParam
		if args[0] != nil {
			arg0 = args[0].(api.UpdateTaskParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_UpdateTask_Call) Return(task dto.Task, err error) *MockClient_UpdateTask_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockClient_UpdateTask_Call) RunAndReturn(run func(updateTaskParam api.UpdateTaskParam) (dto.Task, error)) *MockClient_UpdateTask_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTimeEntry provides a mock function for the type MockClient
func (_mock *MockClient) UpdateTimeEntry(updateTimeEntryParam api.UpdateTimeEntryParam) (dto.TimeEntryImpl, error) {
	ret := _mock.Called(updateTimeEntryParam)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTimeEntry")
	}

	var r0 dto.TimeEntryImpl
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.UpdateTimeEntryParam) (dto.TimeEntryImpl, error)); ok {
		return returnFunc(updateTimeEntryParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.UpdateTimeEntryParam) dto.TimeEntryImpl); ok {
		r0 = returnFunc(updateTimeEntryParam)
	} else {
		r0 = ret.Get(0).(dto.TimeEntryImpl)
	}
	if returnFunc, ok := ret.Get(1).(func(api.UpdateTimeEntryParam) error); ok {
		r1 = returnFunc(updateTimeEntryParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_UpdateTimeEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTimeEntry'
type MockClient_UpdateTimeEntry_Call struct {
	*mock.Call
}

// UpdateTimeEntry is a helper method to define mock.On call
//   - updateTimeEntryParam api.UpdateTimeEntryParam
func (_e *MockClient_Expecter) UpdateTimeEntry(updateTimeEntryParam interface{}) *MockClient_UpdateTimeEntry_Call {
	return &MockClient_UpdateTimeEntry_Call{Call: _e.mock.On("UpdateTimeEntry", updateTimeEntryParam)}
}

func (_c *MockClient_UpdateTimeEntry_Call) Run(run func(updateTimeEntryParam api.UpdateTimeEntryParam)) *MockClient_UpdateTimeEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.UpdateTimeEntryParam
		if args[0] != nil {
			arg0 = args[0].(api.UpdateTimeEntryParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_UpdateTimeEntry_Call) Return(timeEntryImpl dto.TimeEntryImpl, err error) *MockClient_UpdateTimeEntry_Call {
	_c.Call.Return(timeEntryImpl, err)
	return _c
}

func (_c *MockClient_UpdateTimeEntry_Call) RunAndReturn(run func(updateTimeEntryParam api.UpdateTimeEntryParam) (dto.TimeEntryImpl, error)) *MockClient_UpdateTimeEntry_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspaceUsers provides a mock function for the type MockClient
func (_mock *MockClient) WorkspaceUsers(workspaceUsersParam api.WorkspaceUsersParam) ([]dto.User, error) {
	ret := _mock.Called(workspaceUsersParam)

	if len(ret) == 0 {
		panic("no return value specified for WorkspaceUsers")
	}

	var r0 []dto.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.WorkspaceUsersParam) ([]dto.User, error)); ok {
		return returnFunc(workspaceUsersParam)
	}
	if returnFunc, ok := ret.Get(0).(func(api.WorkspaceUsersParam) []dto.User); ok {
		r0 = returnFunc(workspaceUsersParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(api.WorkspaceUsersParam) error); ok {
		r1 = returnFunc(workspaceUsersParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_WorkspaceUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspaceUsers'
type MockClient_WorkspaceUsers_Call struct {
	*mock.Call
}

// WorkspaceUsers is a helper method to define mock.On call
//   - workspaceUsersParam api.WorkspaceUsersParam
func (_e *MockClient_Expecter) WorkspaceUsers(workspaceUsersParam interface{}) *MockClient_WorkspaceUsers_Call {
	return &MockClient_WorkspaceUsers_Call{Call: _e.mock.On("WorkspaceUsers", workspaceUsersParam)}
}

func (_c *MockClient_WorkspaceUsers_Call) Run(run func(workspaceUsersParam api.WorkspaceUsersParam)) *MockClient_WorkspaceUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.WorkspaceUsersParam
		if args[0] != nil {
			arg0 = args[0].(api.WorkspaceUsersParam)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_WorkspaceUsers_Call) Return(users []dto.User, err error) *MockClient_WorkspaceUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockClient_WorkspaceUsers_Call) RunAndReturn(run func(workspaceUsersParam api.WorkspaceUsersParam) ([]dto.User, error)) *MockClient_WorkspaceUsers_Call {
	_c.Call.Return(run)
	return _c
}
