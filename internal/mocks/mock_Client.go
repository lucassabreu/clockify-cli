// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	api "github.com/lucassabreu/clockify-cli/api"
	dto "github.com/lucassabreu/clockify-cli/api/dto"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// AddClient provides a mock function with given fields: _a0
func (_m *MockClient) AddClient(_a0 api.AddClientParam) (dto.Client, error) {
	ret := _m.Called(_a0)

	var r0 dto.Client
	if rf, ok := ret.Get(0).(func(api.AddClientParam) dto.Client); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Client)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.AddClientParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_AddClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddClient'
type MockClient_AddClient_Call struct {
	*mock.Call
}

// AddClient is a helper method to define mock.On call
//   - _a0 api.AddClientParam
func (_e *MockClient_Expecter) AddClient(_a0 interface{}) *MockClient_AddClient_Call {
	return &MockClient_AddClient_Call{Call: _e.mock.On("AddClient", _a0)}
}

func (_c *MockClient_AddClient_Call) Run(run func(_a0 api.AddClientParam)) *MockClient_AddClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.AddClientParam))
	})
	return _c
}

func (_c *MockClient_AddClient_Call) Return(_a0 dto.Client, _a1 error) *MockClient_AddClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// AddProject provides a mock function with given fields: _a0
func (_m *MockClient) AddProject(_a0 api.AddProjectParam) (dto.Project, error) {
	ret := _m.Called(_a0)

	var r0 dto.Project
	if rf, ok := ret.Get(0).(func(api.AddProjectParam) dto.Project); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Project)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.AddProjectParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_AddProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProject'
type MockClient_AddProject_Call struct {
	*mock.Call
}

// AddProject is a helper method to define mock.On call
//   - _a0 api.AddProjectParam
func (_e *MockClient_Expecter) AddProject(_a0 interface{}) *MockClient_AddProject_Call {
	return &MockClient_AddProject_Call{Call: _e.mock.On("AddProject", _a0)}
}

func (_c *MockClient_AddProject_Call) Run(run func(_a0 api.AddProjectParam)) *MockClient_AddProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.AddProjectParam))
	})
	return _c
}

func (_c *MockClient_AddProject_Call) Return(_a0 dto.Project, _a1 error) *MockClient_AddProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// AddTask provides a mock function with given fields: _a0
func (_m *MockClient) AddTask(_a0 api.AddTaskParam) (dto.Task, error) {
	ret := _m.Called(_a0)

	var r0 dto.Task
	if rf, ok := ret.Get(0).(func(api.AddTaskParam) dto.Task); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.AddTaskParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_AddTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTask'
type MockClient_AddTask_Call struct {
	*mock.Call
}

// AddTask is a helper method to define mock.On call
//   - _a0 api.AddTaskParam
func (_e *MockClient_Expecter) AddTask(_a0 interface{}) *MockClient_AddTask_Call {
	return &MockClient_AddTask_Call{Call: _e.mock.On("AddTask", _a0)}
}

func (_c *MockClient_AddTask_Call) Run(run func(_a0 api.AddTaskParam)) *MockClient_AddTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.AddTaskParam))
	})
	return _c
}

func (_c *MockClient_AddTask_Call) Return(_a0 dto.Task, _a1 error) *MockClient_AddTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ChangeInvoiced provides a mock function with given fields: _a0
func (_m *MockClient) ChangeInvoiced(_a0 api.ChangeInvoicedParam) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(api.ChangeInvoicedParam) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_ChangeInvoiced_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeInvoiced'
type MockClient_ChangeInvoiced_Call struct {
	*mock.Call
}

// ChangeInvoiced is a helper method to define mock.On call
//   - _a0 api.ChangeInvoicedParam
func (_e *MockClient_Expecter) ChangeInvoiced(_a0 interface{}) *MockClient_ChangeInvoiced_Call {
	return &MockClient_ChangeInvoiced_Call{Call: _e.mock.On("ChangeInvoiced", _a0)}
}

func (_c *MockClient_ChangeInvoiced_Call) Run(run func(_a0 api.ChangeInvoicedParam)) *MockClient_ChangeInvoiced_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.ChangeInvoicedParam))
	})
	return _c
}

func (_c *MockClient_ChangeInvoiced_Call) Return(_a0 error) *MockClient_ChangeInvoiced_Call {
	_c.Call.Return(_a0)
	return _c
}

// CreateTimeEntry provides a mock function with given fields: _a0
func (_m *MockClient) CreateTimeEntry(_a0 api.CreateTimeEntryParam) (dto.TimeEntryImpl, error) {
	ret := _m.Called(_a0)

	var r0 dto.TimeEntryImpl
	if rf, ok := ret.Get(0).(func(api.CreateTimeEntryParam) dto.TimeEntryImpl); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.TimeEntryImpl)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.CreateTimeEntryParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_CreateTimeEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTimeEntry'
type MockClient_CreateTimeEntry_Call struct {
	*mock.Call
}

// CreateTimeEntry is a helper method to define mock.On call
//   - _a0 api.CreateTimeEntryParam
func (_e *MockClient_Expecter) CreateTimeEntry(_a0 interface{}) *MockClient_CreateTimeEntry_Call {
	return &MockClient_CreateTimeEntry_Call{Call: _e.mock.On("CreateTimeEntry", _a0)}
}

func (_c *MockClient_CreateTimeEntry_Call) Run(run func(_a0 api.CreateTimeEntryParam)) *MockClient_CreateTimeEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.CreateTimeEntryParam))
	})
	return _c
}

func (_c *MockClient_CreateTimeEntry_Call) Return(_a0 dto.TimeEntryImpl, _a1 error) *MockClient_CreateTimeEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteProject provides a mock function with given fields: _a0
func (_m *MockClient) DeleteProject(_a0 api.DeleteProjectParam) (dto.Project, error) {
	ret := _m.Called(_a0)

	var r0 dto.Project
	if rf, ok := ret.Get(0).(func(api.DeleteProjectParam) dto.Project); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Project)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.DeleteProjectParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_DeleteProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProject'
type MockClient_DeleteProject_Call struct {
	*mock.Call
}

// DeleteProject is a helper method to define mock.On call
//   - _a0 api.DeleteProjectParam
func (_e *MockClient_Expecter) DeleteProject(_a0 interface{}) *MockClient_DeleteProject_Call {
	return &MockClient_DeleteProject_Call{Call: _e.mock.On("DeleteProject", _a0)}
}

func (_c *MockClient_DeleteProject_Call) Run(run func(_a0 api.DeleteProjectParam)) *MockClient_DeleteProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.DeleteProjectParam))
	})
	return _c
}

func (_c *MockClient_DeleteProject_Call) Return(_a0 dto.Project, _a1 error) *MockClient_DeleteProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTask provides a mock function with given fields: _a0
func (_m *MockClient) DeleteTask(_a0 api.DeleteTaskParam) (dto.Task, error) {
	ret := _m.Called(_a0)

	var r0 dto.Task
	if rf, ok := ret.Get(0).(func(api.DeleteTaskParam) dto.Task); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.DeleteTaskParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type MockClient_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - _a0 api.DeleteTaskParam
func (_e *MockClient_Expecter) DeleteTask(_a0 interface{}) *MockClient_DeleteTask_Call {
	return &MockClient_DeleteTask_Call{Call: _e.mock.On("DeleteTask", _a0)}
}

func (_c *MockClient_DeleteTask_Call) Run(run func(_a0 api.DeleteTaskParam)) *MockClient_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.DeleteTaskParam))
	})
	return _c
}

func (_c *MockClient_DeleteTask_Call) Return(_a0 dto.Task, _a1 error) *MockClient_DeleteTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTimeEntry provides a mock function with given fields: _a0
func (_m *MockClient) DeleteTimeEntry(_a0 api.DeleteTimeEntryParam) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(api.DeleteTimeEntryParam) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_DeleteTimeEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTimeEntry'
type MockClient_DeleteTimeEntry_Call struct {
	*mock.Call
}

// DeleteTimeEntry is a helper method to define mock.On call
//   - _a0 api.DeleteTimeEntryParam
func (_e *MockClient_Expecter) DeleteTimeEntry(_a0 interface{}) *MockClient_DeleteTimeEntry_Call {
	return &MockClient_DeleteTimeEntry_Call{Call: _e.mock.On("DeleteTimeEntry", _a0)}
}

func (_c *MockClient_DeleteTimeEntry_Call) Run(run func(_a0 api.DeleteTimeEntryParam)) *MockClient_DeleteTimeEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.DeleteTimeEntryParam))
	})
	return _c
}

func (_c *MockClient_DeleteTimeEntry_Call) Return(_a0 error) *MockClient_DeleteTimeEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetClients provides a mock function with given fields: _a0
func (_m *MockClient) GetClients(_a0 api.GetClientsParam) ([]dto.Client, error) {
	ret := _m.Called(_a0)

	var r0 []dto.Client
	if rf, ok := ret.Get(0).(func(api.GetClientsParam) []dto.Client); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetClientsParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClients'
type MockClient_GetClients_Call struct {
	*mock.Call
}

// GetClients is a helper method to define mock.On call
//   - _a0 api.GetClientsParam
func (_e *MockClient_Expecter) GetClients(_a0 interface{}) *MockClient_GetClients_Call {
	return &MockClient_GetClients_Call{Call: _e.mock.On("GetClients", _a0)}
}

func (_c *MockClient_GetClients_Call) Run(run func(_a0 api.GetClientsParam)) *MockClient_GetClients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.GetClientsParam))
	})
	return _c
}

func (_c *MockClient_GetClients_Call) Return(_a0 []dto.Client, _a1 error) *MockClient_GetClients_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetHydratedTimeEntry provides a mock function with given fields: _a0
func (_m *MockClient) GetHydratedTimeEntry(_a0 api.GetTimeEntryParam) (*dto.TimeEntry, error) {
	ret := _m.Called(_a0)

	var r0 *dto.TimeEntry
	if rf, ok := ret.Get(0).(func(api.GetTimeEntryParam) *dto.TimeEntry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TimeEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetTimeEntryParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetHydratedTimeEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHydratedTimeEntry'
type MockClient_GetHydratedTimeEntry_Call struct {
	*mock.Call
}

// GetHydratedTimeEntry is a helper method to define mock.On call
//   - _a0 api.GetTimeEntryParam
func (_e *MockClient_Expecter) GetHydratedTimeEntry(_a0 interface{}) *MockClient_GetHydratedTimeEntry_Call {
	return &MockClient_GetHydratedTimeEntry_Call{Call: _e.mock.On("GetHydratedTimeEntry", _a0)}
}

func (_c *MockClient_GetHydratedTimeEntry_Call) Run(run func(_a0 api.GetTimeEntryParam)) *MockClient_GetHydratedTimeEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.GetTimeEntryParam))
	})
	return _c
}

func (_c *MockClient_GetHydratedTimeEntry_Call) Return(_a0 *dto.TimeEntry, _a1 error) *MockClient_GetHydratedTimeEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetHydratedTimeEntryInProgress provides a mock function with given fields: _a0
func (_m *MockClient) GetHydratedTimeEntryInProgress(_a0 api.GetTimeEntryInProgressParam) (*dto.TimeEntry, error) {
	ret := _m.Called(_a0)

	var r0 *dto.TimeEntry
	if rf, ok := ret.Get(0).(func(api.GetTimeEntryInProgressParam) *dto.TimeEntry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TimeEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetTimeEntryInProgressParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetHydratedTimeEntryInProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHydratedTimeEntryInProgress'
type MockClient_GetHydratedTimeEntryInProgress_Call struct {
	*mock.Call
}

// GetHydratedTimeEntryInProgress is a helper method to define mock.On call
//   - _a0 api.GetTimeEntryInProgressParam
func (_e *MockClient_Expecter) GetHydratedTimeEntryInProgress(_a0 interface{}) *MockClient_GetHydratedTimeEntryInProgress_Call {
	return &MockClient_GetHydratedTimeEntryInProgress_Call{Call: _e.mock.On("GetHydratedTimeEntryInProgress", _a0)}
}

func (_c *MockClient_GetHydratedTimeEntryInProgress_Call) Run(run func(_a0 api.GetTimeEntryInProgressParam)) *MockClient_GetHydratedTimeEntryInProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.GetTimeEntryInProgressParam))
	})
	return _c
}

func (_c *MockClient_GetHydratedTimeEntryInProgress_Call) Return(_a0 *dto.TimeEntry, _a1 error) *MockClient_GetHydratedTimeEntryInProgress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetMe provides a mock function with given fields:
func (_m *MockClient) GetMe() (dto.User, error) {
	ret := _m.Called()

	var r0 dto.User
	if rf, ok := ret.Get(0).(func() dto.User); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dto.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetMe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMe'
type MockClient_GetMe_Call struct {
	*mock.Call
}

// GetMe is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetMe() *MockClient_GetMe_Call {
	return &MockClient_GetMe_Call{Call: _e.mock.On("GetMe")}
}

func (_c *MockClient_GetMe_Call) Run(run func()) *MockClient_GetMe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetMe_Call) Return(_a0 dto.User, _a1 error) *MockClient_GetMe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetProject provides a mock function with given fields: _a0
func (_m *MockClient) GetProject(_a0 api.GetProjectParam) (*dto.Project, error) {
	ret := _m.Called(_a0)

	var r0 *dto.Project
	if rf, ok := ret.Get(0).(func(api.GetProjectParam) *dto.Project); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetProjectParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type MockClient_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - _a0 api.GetProjectParam
func (_e *MockClient_Expecter) GetProject(_a0 interface{}) *MockClient_GetProject_Call {
	return &MockClient_GetProject_Call{Call: _e.mock.On("GetProject", _a0)}
}

func (_c *MockClient_GetProject_Call) Run(run func(_a0 api.GetProjectParam)) *MockClient_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.GetProjectParam))
	})
	return _c
}

func (_c *MockClient_GetProject_Call) Return(_a0 *dto.Project, _a1 error) *MockClient_GetProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetProjects provides a mock function with given fields: _a0
func (_m *MockClient) GetProjects(_a0 api.GetProjectsParam) ([]dto.Project, error) {
	ret := _m.Called(_a0)

	var r0 []dto.Project
	if rf, ok := ret.Get(0).(func(api.GetProjectsParam) []dto.Project); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetProjectsParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjects'
type MockClient_GetProjects_Call struct {
	*mock.Call
}

// GetProjects is a helper method to define mock.On call
//   - _a0 api.GetProjectsParam
func (_e *MockClient_Expecter) GetProjects(_a0 interface{}) *MockClient_GetProjects_Call {
	return &MockClient_GetProjects_Call{Call: _e.mock.On("GetProjects", _a0)}
}

func (_c *MockClient_GetProjects_Call) Run(run func(_a0 api.GetProjectsParam)) *MockClient_GetProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.GetProjectsParam))
	})
	return _c
}

func (_c *MockClient_GetProjects_Call) Return(_a0 []dto.Project, _a1 error) *MockClient_GetProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTag provides a mock function with given fields: _a0
func (_m *MockClient) GetTag(_a0 api.GetTagParam) (*dto.Tag, error) {
	ret := _m.Called(_a0)

	var r0 *dto.Tag
	if rf, ok := ret.Get(0).(func(api.GetTagParam) *dto.Tag); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetTagParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTag'
type MockClient_GetTag_Call struct {
	*mock.Call
}

// GetTag is a helper method to define mock.On call
//   - _a0 api.GetTagParam
func (_e *MockClient_Expecter) GetTag(_a0 interface{}) *MockClient_GetTag_Call {
	return &MockClient_GetTag_Call{Call: _e.mock.On("GetTag", _a0)}
}

func (_c *MockClient_GetTag_Call) Run(run func(_a0 api.GetTagParam)) *MockClient_GetTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.GetTagParam))
	})
	return _c
}

func (_c *MockClient_GetTag_Call) Return(_a0 *dto.Tag, _a1 error) *MockClient_GetTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTags provides a mock function with given fields: _a0
func (_m *MockClient) GetTags(_a0 api.GetTagsParam) ([]dto.Tag, error) {
	ret := _m.Called(_a0)

	var r0 []dto.Tag
	if rf, ok := ret.Get(0).(func(api.GetTagsParam) []dto.Tag); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetTagsParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTags'
type MockClient_GetTags_Call struct {
	*mock.Call
}

// GetTags is a helper method to define mock.On call
//   - _a0 api.GetTagsParam
func (_e *MockClient_Expecter) GetTags(_a0 interface{}) *MockClient_GetTags_Call {
	return &MockClient_GetTags_Call{Call: _e.mock.On("GetTags", _a0)}
}

func (_c *MockClient_GetTags_Call) Run(run func(_a0 api.GetTagsParam)) *MockClient_GetTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.GetTagsParam))
	})
	return _c
}

func (_c *MockClient_GetTags_Call) Return(_a0 []dto.Tag, _a1 error) *MockClient_GetTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTask provides a mock function with given fields: _a0
func (_m *MockClient) GetTask(_a0 api.GetTaskParam) (dto.Task, error) {
	ret := _m.Called(_a0)

	var r0 dto.Task
	if rf, ok := ret.Get(0).(func(api.GetTaskParam) dto.Task); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetTaskParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type MockClient_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - _a0 api.GetTaskParam
func (_e *MockClient_Expecter) GetTask(_a0 interface{}) *MockClient_GetTask_Call {
	return &MockClient_GetTask_Call{Call: _e.mock.On("GetTask", _a0)}
}

func (_c *MockClient_GetTask_Call) Run(run func(_a0 api.GetTaskParam)) *MockClient_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.GetTaskParam))
	})
	return _c
}

func (_c *MockClient_GetTask_Call) Return(_a0 dto.Task, _a1 error) *MockClient_GetTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTasks provides a mock function with given fields: _a0
func (_m *MockClient) GetTasks(_a0 api.GetTasksParam) ([]dto.Task, error) {
	ret := _m.Called(_a0)

	var r0 []dto.Task
	if rf, ok := ret.Get(0).(func(api.GetTasksParam) []dto.Task); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetTasksParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasks'
type MockClient_GetTasks_Call struct {
	*mock.Call
}

// GetTasks is a helper method to define mock.On call
//   - _a0 api.GetTasksParam
func (_e *MockClient_Expecter) GetTasks(_a0 interface{}) *MockClient_GetTasks_Call {
	return &MockClient_GetTasks_Call{Call: _e.mock.On("GetTasks", _a0)}
}

func (_c *MockClient_GetTasks_Call) Run(run func(_a0 api.GetTasksParam)) *MockClient_GetTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.GetTasksParam))
	})
	return _c
}

func (_c *MockClient_GetTasks_Call) Return(_a0 []dto.Task, _a1 error) *MockClient_GetTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTimeEntry provides a mock function with given fields: _a0
func (_m *MockClient) GetTimeEntry(_a0 api.GetTimeEntryParam) (*dto.TimeEntryImpl, error) {
	ret := _m.Called(_a0)

	var r0 *dto.TimeEntryImpl
	if rf, ok := ret.Get(0).(func(api.GetTimeEntryParam) *dto.TimeEntryImpl); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TimeEntryImpl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetTimeEntryParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetTimeEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTimeEntry'
type MockClient_GetTimeEntry_Call struct {
	*mock.Call
}

// GetTimeEntry is a helper method to define mock.On call
//   - _a0 api.GetTimeEntryParam
func (_e *MockClient_Expecter) GetTimeEntry(_a0 interface{}) *MockClient_GetTimeEntry_Call {
	return &MockClient_GetTimeEntry_Call{Call: _e.mock.On("GetTimeEntry", _a0)}
}

func (_c *MockClient_GetTimeEntry_Call) Run(run func(_a0 api.GetTimeEntryParam)) *MockClient_GetTimeEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.GetTimeEntryParam))
	})
	return _c
}

func (_c *MockClient_GetTimeEntry_Call) Return(_a0 *dto.TimeEntryImpl, _a1 error) *MockClient_GetTimeEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTimeEntryInProgress provides a mock function with given fields: _a0
func (_m *MockClient) GetTimeEntryInProgress(_a0 api.GetTimeEntryInProgressParam) (*dto.TimeEntryImpl, error) {
	ret := _m.Called(_a0)

	var r0 *dto.TimeEntryImpl
	if rf, ok := ret.Get(0).(func(api.GetTimeEntryInProgressParam) *dto.TimeEntryImpl); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TimeEntryImpl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetTimeEntryInProgressParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetTimeEntryInProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTimeEntryInProgress'
type MockClient_GetTimeEntryInProgress_Call struct {
	*mock.Call
}

// GetTimeEntryInProgress is a helper method to define mock.On call
//   - _a0 api.GetTimeEntryInProgressParam
func (_e *MockClient_Expecter) GetTimeEntryInProgress(_a0 interface{}) *MockClient_GetTimeEntryInProgress_Call {
	return &MockClient_GetTimeEntryInProgress_Call{Call: _e.mock.On("GetTimeEntryInProgress", _a0)}
}

func (_c *MockClient_GetTimeEntryInProgress_Call) Run(run func(_a0 api.GetTimeEntryInProgressParam)) *MockClient_GetTimeEntryInProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.GetTimeEntryInProgressParam))
	})
	return _c
}

func (_c *MockClient_GetTimeEntryInProgress_Call) Return(_a0 *dto.TimeEntryImpl, _a1 error) *MockClient_GetTimeEntryInProgress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUser provides a mock function with given fields: _a0
func (_m *MockClient) GetUser(_a0 api.GetUser) (dto.User, error) {
	ret := _m.Called(_a0)

	var r0 dto.User
	if rf, ok := ret.Get(0).(func(api.GetUser) dto.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetUser) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockClient_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - _a0 api.GetUser
func (_e *MockClient_Expecter) GetUser(_a0 interface{}) *MockClient_GetUser_Call {
	return &MockClient_GetUser_Call{Call: _e.mock.On("GetUser", _a0)}
}

func (_c *MockClient_GetUser_Call) Run(run func(_a0 api.GetUser)) *MockClient_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.GetUser))
	})
	return _c
}

func (_c *MockClient_GetUser_Call) Return(_a0 dto.User, _a1 error) *MockClient_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUserTimeEntries provides a mock function with given fields: _a0
func (_m *MockClient) GetUserTimeEntries(_a0 api.GetUserTimeEntriesParam) ([]dto.TimeEntryImpl, error) {
	ret := _m.Called(_a0)

	var r0 []dto.TimeEntryImpl
	if rf, ok := ret.Get(0).(func(api.GetUserTimeEntriesParam) []dto.TimeEntryImpl); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.TimeEntryImpl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetUserTimeEntriesParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetUserTimeEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserTimeEntries'
type MockClient_GetUserTimeEntries_Call struct {
	*mock.Call
}

// GetUserTimeEntries is a helper method to define mock.On call
//   - _a0 api.GetUserTimeEntriesParam
func (_e *MockClient_Expecter) GetUserTimeEntries(_a0 interface{}) *MockClient_GetUserTimeEntries_Call {
	return &MockClient_GetUserTimeEntries_Call{Call: _e.mock.On("GetUserTimeEntries", _a0)}
}

func (_c *MockClient_GetUserTimeEntries_Call) Run(run func(_a0 api.GetUserTimeEntriesParam)) *MockClient_GetUserTimeEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.GetUserTimeEntriesParam))
	})
	return _c
}

func (_c *MockClient_GetUserTimeEntries_Call) Return(_a0 []dto.TimeEntryImpl, _a1 error) *MockClient_GetUserTimeEntries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUsersHydratedTimeEntries provides a mock function with given fields: _a0
func (_m *MockClient) GetUsersHydratedTimeEntries(_a0 api.GetUserTimeEntriesParam) ([]dto.TimeEntry, error) {
	ret := _m.Called(_a0)

	var r0 []dto.TimeEntry
	if rf, ok := ret.Get(0).(func(api.GetUserTimeEntriesParam) []dto.TimeEntry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.TimeEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetUserTimeEntriesParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetUsersHydratedTimeEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersHydratedTimeEntries'
type MockClient_GetUsersHydratedTimeEntries_Call struct {
	*mock.Call
}

// GetUsersHydratedTimeEntries is a helper method to define mock.On call
//   - _a0 api.GetUserTimeEntriesParam
func (_e *MockClient_Expecter) GetUsersHydratedTimeEntries(_a0 interface{}) *MockClient_GetUsersHydratedTimeEntries_Call {
	return &MockClient_GetUsersHydratedTimeEntries_Call{Call: _e.mock.On("GetUsersHydratedTimeEntries", _a0)}
}

func (_c *MockClient_GetUsersHydratedTimeEntries_Call) Run(run func(_a0 api.GetUserTimeEntriesParam)) *MockClient_GetUsersHydratedTimeEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.GetUserTimeEntriesParam))
	})
	return _c
}

func (_c *MockClient_GetUsersHydratedTimeEntries_Call) Return(_a0 []dto.TimeEntry, _a1 error) *MockClient_GetUsersHydratedTimeEntries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetWorkspace provides a mock function with given fields: _a0
func (_m *MockClient) GetWorkspace(_a0 api.GetWorkspace) (dto.Workspace, error) {
	ret := _m.Called(_a0)

	var r0 dto.Workspace
	if rf, ok := ret.Get(0).(func(api.GetWorkspace) dto.Workspace); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Workspace)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetWorkspace) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspace'
type MockClient_GetWorkspace_Call struct {
	*mock.Call
}

// GetWorkspace is a helper method to define mock.On call
//   - _a0 api.GetWorkspace
func (_e *MockClient_Expecter) GetWorkspace(_a0 interface{}) *MockClient_GetWorkspace_Call {
	return &MockClient_GetWorkspace_Call{Call: _e.mock.On("GetWorkspace", _a0)}
}

func (_c *MockClient_GetWorkspace_Call) Run(run func(_a0 api.GetWorkspace)) *MockClient_GetWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.GetWorkspace))
	})
	return _c
}

func (_c *MockClient_GetWorkspace_Call) Return(_a0 dto.Workspace, _a1 error) *MockClient_GetWorkspace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetWorkspaces provides a mock function with given fields: _a0
func (_m *MockClient) GetWorkspaces(_a0 api.GetWorkspaces) ([]dto.Workspace, error) {
	ret := _m.Called(_a0)

	var r0 []dto.Workspace
	if rf, ok := ret.Get(0).(func(api.GetWorkspaces) []dto.Workspace); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Workspace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.GetWorkspaces) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetWorkspaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaces'
type MockClient_GetWorkspaces_Call struct {
	*mock.Call
}

// GetWorkspaces is a helper method to define mock.On call
//   - _a0 api.GetWorkspaces
func (_e *MockClient_Expecter) GetWorkspaces(_a0 interface{}) *MockClient_GetWorkspaces_Call {
	return &MockClient_GetWorkspaces_Call{Call: _e.mock.On("GetWorkspaces", _a0)}
}

func (_c *MockClient_GetWorkspaces_Call) Run(run func(_a0 api.GetWorkspaces)) *MockClient_GetWorkspaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.GetWorkspaces))
	})
	return _c
}

func (_c *MockClient_GetWorkspaces_Call) Return(_a0 []dto.Workspace, _a1 error) *MockClient_GetWorkspaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Log provides a mock function with given fields: _a0
func (_m *MockClient) Log(_a0 api.LogParam) ([]dto.TimeEntry, error) {
	ret := _m.Called(_a0)

	var r0 []dto.TimeEntry
	if rf, ok := ret.Get(0).(func(api.LogParam) []dto.TimeEntry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.TimeEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.LogParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type MockClient_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - _a0 api.LogParam
func (_e *MockClient_Expecter) Log(_a0 interface{}) *MockClient_Log_Call {
	return &MockClient_Log_Call{Call: _e.mock.On("Log", _a0)}
}

func (_c *MockClient_Log_Call) Run(run func(_a0 api.LogParam)) *MockClient_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.LogParam))
	})
	return _c
}

func (_c *MockClient_Log_Call) Return(_a0 []dto.TimeEntry, _a1 error) *MockClient_Log_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// LogRange provides a mock function with given fields: _a0
func (_m *MockClient) LogRange(_a0 api.LogRangeParam) ([]dto.TimeEntry, error) {
	ret := _m.Called(_a0)

	var r0 []dto.TimeEntry
	if rf, ok := ret.Get(0).(func(api.LogRangeParam) []dto.TimeEntry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.TimeEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.LogRangeParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_LogRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogRange'
type MockClient_LogRange_Call struct {
	*mock.Call
}

// LogRange is a helper method to define mock.On call
//   - _a0 api.LogRangeParam
func (_e *MockClient_Expecter) LogRange(_a0 interface{}) *MockClient_LogRange_Call {
	return &MockClient_LogRange_Call{Call: _e.mock.On("LogRange", _a0)}
}

func (_c *MockClient_LogRange_Call) Run(run func(_a0 api.LogRangeParam)) *MockClient_LogRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.LogRangeParam))
	})
	return _c
}

func (_c *MockClient_LogRange_Call) Return(_a0 []dto.TimeEntry, _a1 error) *MockClient_LogRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Out provides a mock function with given fields: _a0
func (_m *MockClient) Out(_a0 api.OutParam) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(api.OutParam) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_Out_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Out'
type MockClient_Out_Call struct {
	*mock.Call
}

// Out is a helper method to define mock.On call
//   - _a0 api.OutParam
func (_e *MockClient_Expecter) Out(_a0 interface{}) *MockClient_Out_Call {
	return &MockClient_Out_Call{Call: _e.mock.On("Out", _a0)}
}

func (_c *MockClient_Out_Call) Run(run func(_a0 api.OutParam)) *MockClient_Out_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.OutParam))
	})
	return _c
}

func (_c *MockClient_Out_Call) Return(_a0 error) *MockClient_Out_Call {
	_c.Call.Return(_a0)
	return _c
}

// SetDebugLogger provides a mock function with given fields: logger
func (_m *MockClient) SetDebugLogger(logger api.Logger) api.Client {
	ret := _m.Called(logger)

	var r0 api.Client
	if rf, ok := ret.Get(0).(func(api.Logger) api.Client); ok {
		r0 = rf(logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.Client)
		}
	}

	return r0
}

// MockClient_SetDebugLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDebugLogger'
type MockClient_SetDebugLogger_Call struct {
	*mock.Call
}

// SetDebugLogger is a helper method to define mock.On call
//   - logger api.Logger
func (_e *MockClient_Expecter) SetDebugLogger(logger interface{}) *MockClient_SetDebugLogger_Call {
	return &MockClient_SetDebugLogger_Call{Call: _e.mock.On("SetDebugLogger", logger)}
}

func (_c *MockClient_SetDebugLogger_Call) Run(run func(logger api.Logger)) *MockClient_SetDebugLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.Logger))
	})
	return _c
}

func (_c *MockClient_SetDebugLogger_Call) Return(_a0 api.Client) *MockClient_SetDebugLogger_Call {
	_c.Call.Return(_a0)
	return _c
}

// SetInfoLogger provides a mock function with given fields: logger
func (_m *MockClient) SetInfoLogger(logger api.Logger) api.Client {
	ret := _m.Called(logger)

	var r0 api.Client
	if rf, ok := ret.Get(0).(func(api.Logger) api.Client); ok {
		r0 = rf(logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.Client)
		}
	}

	return r0
}

// MockClient_SetInfoLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetInfoLogger'
type MockClient_SetInfoLogger_Call struct {
	*mock.Call
}

// SetInfoLogger is a helper method to define mock.On call
//   - logger api.Logger
func (_e *MockClient_Expecter) SetInfoLogger(logger interface{}) *MockClient_SetInfoLogger_Call {
	return &MockClient_SetInfoLogger_Call{Call: _e.mock.On("SetInfoLogger", logger)}
}

func (_c *MockClient_SetInfoLogger_Call) Run(run func(logger api.Logger)) *MockClient_SetInfoLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.Logger))
	})
	return _c
}

func (_c *MockClient_SetInfoLogger_Call) Return(_a0 api.Client) *MockClient_SetInfoLogger_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateProject provides a mock function with given fields: _a0
func (_m *MockClient) UpdateProject(_a0 api.UpdateProjectParam) (dto.Project, error) {
	ret := _m.Called(_a0)

	var r0 dto.Project
	if rf, ok := ret.Get(0).(func(api.UpdateProjectParam) dto.Project); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Project)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.UpdateProjectParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_UpdateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProject'
type MockClient_UpdateProject_Call struct {
	*mock.Call
}

// UpdateProject is a helper method to define mock.On call
//   - _a0 api.UpdateProjectParam
func (_e *MockClient_Expecter) UpdateProject(_a0 interface{}) *MockClient_UpdateProject_Call {
	return &MockClient_UpdateProject_Call{Call: _e.mock.On("UpdateProject", _a0)}
}

func (_c *MockClient_UpdateProject_Call) Run(run func(_a0 api.UpdateProjectParam)) *MockClient_UpdateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.UpdateProjectParam))
	})
	return _c
}

func (_c *MockClient_UpdateProject_Call) Return(_a0 dto.Project, _a1 error) *MockClient_UpdateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateProjectEstimate provides a mock function with given fields: _a0
func (_m *MockClient) UpdateProjectEstimate(_a0 api.UpdateProjectEstimateParam) (dto.Project, error) {
	ret := _m.Called(_a0)

	var r0 dto.Project
	if rf, ok := ret.Get(0).(func(api.UpdateProjectEstimateParam) dto.Project); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Project)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.UpdateProjectEstimateParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_UpdateProjectEstimate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectEstimate'
type MockClient_UpdateProjectEstimate_Call struct {
	*mock.Call
}

// UpdateProjectEstimate is a helper method to define mock.On call
//   - _a0 api.UpdateProjectEstimateParam
func (_e *MockClient_Expecter) UpdateProjectEstimate(_a0 interface{}) *MockClient_UpdateProjectEstimate_Call {
	return &MockClient_UpdateProjectEstimate_Call{Call: _e.mock.On("UpdateProjectEstimate", _a0)}
}

func (_c *MockClient_UpdateProjectEstimate_Call) Run(run func(_a0 api.UpdateProjectEstimateParam)) *MockClient_UpdateProjectEstimate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.UpdateProjectEstimateParam))
	})
	return _c
}

func (_c *MockClient_UpdateProjectEstimate_Call) Return(_a0 dto.Project, _a1 error) *MockClient_UpdateProjectEstimate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateProjectMemberships provides a mock function with given fields: _a0
func (_m *MockClient) UpdateProjectMemberships(_a0 api.UpdateProjectMembershipsParam) (dto.Project, error) {
	ret := _m.Called(_a0)

	var r0 dto.Project
	if rf, ok := ret.Get(0).(func(api.UpdateProjectMembershipsParam) dto.Project); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Project)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.UpdateProjectMembershipsParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_UpdateProjectMemberships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectMemberships'
type MockClient_UpdateProjectMemberships_Call struct {
	*mock.Call
}

// UpdateProjectMemberships is a helper method to define mock.On call
//   - _a0 api.UpdateProjectMembershipsParam
func (_e *MockClient_Expecter) UpdateProjectMemberships(_a0 interface{}) *MockClient_UpdateProjectMemberships_Call {
	return &MockClient_UpdateProjectMemberships_Call{Call: _e.mock.On("UpdateProjectMemberships", _a0)}
}

func (_c *MockClient_UpdateProjectMemberships_Call) Run(run func(_a0 api.UpdateProjectMembershipsParam)) *MockClient_UpdateProjectMemberships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.UpdateProjectMembershipsParam))
	})
	return _c
}

func (_c *MockClient_UpdateProjectMemberships_Call) Return(_a0 dto.Project, _a1 error) *MockClient_UpdateProjectMemberships_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateProjectTemplate provides a mock function with given fields: _a0
func (_m *MockClient) UpdateProjectTemplate(_a0 api.UpdateProjectTemplateParam) (dto.Project, error) {
	ret := _m.Called(_a0)

	var r0 dto.Project
	if rf, ok := ret.Get(0).(func(api.UpdateProjectTemplateParam) dto.Project); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Project)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.UpdateProjectTemplateParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_UpdateProjectTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectTemplate'
type MockClient_UpdateProjectTemplate_Call struct {
	*mock.Call
}

// UpdateProjectTemplate is a helper method to define mock.On call
//   - _a0 api.UpdateProjectTemplateParam
func (_e *MockClient_Expecter) UpdateProjectTemplate(_a0 interface{}) *MockClient_UpdateProjectTemplate_Call {
	return &MockClient_UpdateProjectTemplate_Call{Call: _e.mock.On("UpdateProjectTemplate", _a0)}
}

func (_c *MockClient_UpdateProjectTemplate_Call) Run(run func(_a0 api.UpdateProjectTemplateParam)) *MockClient_UpdateProjectTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.UpdateProjectTemplateParam))
	})
	return _c
}

func (_c *MockClient_UpdateProjectTemplate_Call) Return(_a0 dto.Project, _a1 error) *MockClient_UpdateProjectTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateProjectUserBillableRate provides a mock function with given fields: _a0
func (_m *MockClient) UpdateProjectUserBillableRate(_a0 api.UpdateProjectUserRateParam) (dto.Project, error) {
	ret := _m.Called(_a0)

	var r0 dto.Project
	if rf, ok := ret.Get(0).(func(api.UpdateProjectUserRateParam) dto.Project); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Project)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.UpdateProjectUserRateParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_UpdateProjectUserBillableRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectUserBillableRate'
type MockClient_UpdateProjectUserBillableRate_Call struct {
	*mock.Call
}

// UpdateProjectUserBillableRate is a helper method to define mock.On call
//   - _a0 api.UpdateProjectUserRateParam
func (_e *MockClient_Expecter) UpdateProjectUserBillableRate(_a0 interface{}) *MockClient_UpdateProjectUserBillableRate_Call {
	return &MockClient_UpdateProjectUserBillableRate_Call{Call: _e.mock.On("UpdateProjectUserBillableRate", _a0)}
}

func (_c *MockClient_UpdateProjectUserBillableRate_Call) Run(run func(_a0 api.UpdateProjectUserRateParam)) *MockClient_UpdateProjectUserBillableRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.UpdateProjectUserRateParam))
	})
	return _c
}

func (_c *MockClient_UpdateProjectUserBillableRate_Call) Return(_a0 dto.Project, _a1 error) *MockClient_UpdateProjectUserBillableRate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateProjectUserCostRate provides a mock function with given fields: _a0
func (_m *MockClient) UpdateProjectUserCostRate(_a0 api.UpdateProjectUserRateParam) (dto.Project, error) {
	ret := _m.Called(_a0)

	var r0 dto.Project
	if rf, ok := ret.Get(0).(func(api.UpdateProjectUserRateParam) dto.Project); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Project)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.UpdateProjectUserRateParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_UpdateProjectUserCostRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectUserCostRate'
type MockClient_UpdateProjectUserCostRate_Call struct {
	*mock.Call
}

// UpdateProjectUserCostRate is a helper method to define mock.On call
//   - _a0 api.UpdateProjectUserRateParam
func (_e *MockClient_Expecter) UpdateProjectUserCostRate(_a0 interface{}) *MockClient_UpdateProjectUserCostRate_Call {
	return &MockClient_UpdateProjectUserCostRate_Call{Call: _e.mock.On("UpdateProjectUserCostRate", _a0)}
}

func (_c *MockClient_UpdateProjectUserCostRate_Call) Run(run func(_a0 api.UpdateProjectUserRateParam)) *MockClient_UpdateProjectUserCostRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.UpdateProjectUserRateParam))
	})
	return _c
}

func (_c *MockClient_UpdateProjectUserCostRate_Call) Return(_a0 dto.Project, _a1 error) *MockClient_UpdateProjectUserCostRate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateTask provides a mock function with given fields: _a0
func (_m *MockClient) UpdateTask(_a0 api.UpdateTaskParam) (dto.Task, error) {
	ret := _m.Called(_a0)

	var r0 dto.Task
	if rf, ok := ret.Get(0).(func(api.UpdateTaskParam) dto.Task); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.UpdateTaskParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_UpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTask'
type MockClient_UpdateTask_Call struct {
	*mock.Call
}

// UpdateTask is a helper method to define mock.On call
//   - _a0 api.UpdateTaskParam
func (_e *MockClient_Expecter) UpdateTask(_a0 interface{}) *MockClient_UpdateTask_Call {
	return &MockClient_UpdateTask_Call{Call: _e.mock.On("UpdateTask", _a0)}
}

func (_c *MockClient_UpdateTask_Call) Run(run func(_a0 api.UpdateTaskParam)) *MockClient_UpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.UpdateTaskParam))
	})
	return _c
}

func (_c *MockClient_UpdateTask_Call) Return(_a0 dto.Task, _a1 error) *MockClient_UpdateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateTimeEntry provides a mock function with given fields: _a0
func (_m *MockClient) UpdateTimeEntry(_a0 api.UpdateTimeEntryParam) (dto.TimeEntryImpl, error) {
	ret := _m.Called(_a0)

	var r0 dto.TimeEntryImpl
	if rf, ok := ret.Get(0).(func(api.UpdateTimeEntryParam) dto.TimeEntryImpl); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dto.TimeEntryImpl)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.UpdateTimeEntryParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_UpdateTimeEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTimeEntry'
type MockClient_UpdateTimeEntry_Call struct {
	*mock.Call
}

// UpdateTimeEntry is a helper method to define mock.On call
//   - _a0 api.UpdateTimeEntryParam
func (_e *MockClient_Expecter) UpdateTimeEntry(_a0 interface{}) *MockClient_UpdateTimeEntry_Call {
	return &MockClient_UpdateTimeEntry_Call{Call: _e.mock.On("UpdateTimeEntry", _a0)}
}

func (_c *MockClient_UpdateTimeEntry_Call) Run(run func(_a0 api.UpdateTimeEntryParam)) *MockClient_UpdateTimeEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.UpdateTimeEntryParam))
	})
	return _c
}

func (_c *MockClient_UpdateTimeEntry_Call) Return(_a0 dto.TimeEntryImpl, _a1 error) *MockClient_UpdateTimeEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// WorkspaceUsers provides a mock function with given fields: _a0
func (_m *MockClient) WorkspaceUsers(_a0 api.WorkspaceUsersParam) ([]dto.User, error) {
	ret := _m.Called(_a0)

	var r0 []dto.User
	if rf, ok := ret.Get(0).(func(api.WorkspaceUsersParam) []dto.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.WorkspaceUsersParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_WorkspaceUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspaceUsers'
type MockClient_WorkspaceUsers_Call struct {
	*mock.Call
}

// WorkspaceUsers is a helper method to define mock.On call
//   - _a0 api.WorkspaceUsersParam
func (_e *MockClient_Expecter) WorkspaceUsers(_a0 interface{}) *MockClient_WorkspaceUsers_Call {
	return &MockClient_WorkspaceUsers_Call{Call: _e.mock.On("WorkspaceUsers", _a0)}
}

func (_c *MockClient_WorkspaceUsers_Call) Run(run func(_a0 api.WorkspaceUsersParam)) *MockClient_WorkspaceUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.WorkspaceUsersParam))
	})
	return _c
}

func (_c *MockClient_WorkspaceUsers_Call) Return(_a0 []dto.User, _a1 error) *MockClient_WorkspaceUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockClient(t mockConstructorTestingTNewMockClient) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
