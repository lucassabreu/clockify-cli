// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cmdutil

import (
	"github.com/lucassabreu/clockify-cli/api"
	"github.com/lucassabreu/clockify-cli/api/dto"
	"sync"
)

// Ensure, that FactoryMock does implement Factory.
// If this is not the case, regenerate this file with moq.
var _ Factory = &FactoryMock{}

// FactoryMock is a mock implementation of Factory.
//
// 	func TestSomethingThatUsesFactory(t *testing.T) {
//
// 		// make and configure a mocked Factory
// 		mockedFactory := &FactoryMock{
// 			ClientFunc: func() (*api.Client, error) {
// 				panic("mock out the Client method")
// 			},
// 			ConfigFunc: func() Config {
// 				panic("mock out the Config method")
// 			},
// 			GetUserIDFunc: func() (string, error) {
// 				panic("mock out the GetUserID method")
// 			},
// 			GetWorkspaceFunc: func() (dto.Workspace, error) {
// 				panic("mock out the GetWorkspace method")
// 			},
// 			GetWorkspaceIDFunc: func() (string, error) {
// 				panic("mock out the GetWorkspaceID method")
// 			},
// 			VersionFunc: func() Version {
// 				panic("mock out the Version method")
// 			},
// 		}
//
// 		// use mockedFactory in code that requires Factory
// 		// and then make assertions.
//
// 	}
type FactoryMock struct {
	// ClientFunc mocks the Client method.
	ClientFunc func() (*api.Client, error)

	// ConfigFunc mocks the Config method.
	ConfigFunc func() Config

	// GetUserIDFunc mocks the GetUserID method.
	GetUserIDFunc func() (string, error)

	// GetWorkspaceFunc mocks the GetWorkspace method.
	GetWorkspaceFunc func() (dto.Workspace, error)

	// GetWorkspaceIDFunc mocks the GetWorkspaceID method.
	GetWorkspaceIDFunc func() (string, error)

	// VersionFunc mocks the Version method.
	VersionFunc func() Version

	// calls tracks calls to the methods.
	calls struct {
		// Client holds details about calls to the Client method.
		Client []struct {
		}
		// Config holds details about calls to the Config method.
		Config []struct {
		}
		// GetUserID holds details about calls to the GetUserID method.
		GetUserID []struct {
		}
		// GetWorkspace holds details about calls to the GetWorkspace method.
		GetWorkspace []struct {
		}
		// GetWorkspaceID holds details about calls to the GetWorkspaceID method.
		GetWorkspaceID []struct {
		}
		// Version holds details about calls to the Version method.
		Version []struct {
		}
	}
	lockClient         sync.RWMutex
	lockConfig         sync.RWMutex
	lockGetUserID      sync.RWMutex
	lockGetWorkspace   sync.RWMutex
	lockGetWorkspaceID sync.RWMutex
	lockVersion        sync.RWMutex
}

// Client calls ClientFunc.
func (mock *FactoryMock) Client() (*api.Client, error) {
	if mock.ClientFunc == nil {
		panic("FactoryMock.ClientFunc: method is nil but Factory.Client was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClient.Lock()
	mock.calls.Client = append(mock.calls.Client, callInfo)
	mock.lockClient.Unlock()
	return mock.ClientFunc()
}

// ClientCalls gets all the calls that were made to Client.
// Check the length with:
//     len(mockedFactory.ClientCalls())
func (mock *FactoryMock) ClientCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClient.RLock()
	calls = mock.calls.Client
	mock.lockClient.RUnlock()
	return calls
}

// Config calls ConfigFunc.
func (mock *FactoryMock) Config() Config {
	if mock.ConfigFunc == nil {
		panic("FactoryMock.ConfigFunc: method is nil but Factory.Config was just called")
	}
	callInfo := struct {
	}{}
	mock.lockConfig.Lock()
	mock.calls.Config = append(mock.calls.Config, callInfo)
	mock.lockConfig.Unlock()
	return mock.ConfigFunc()
}

// ConfigCalls gets all the calls that were made to Config.
// Check the length with:
//     len(mockedFactory.ConfigCalls())
func (mock *FactoryMock) ConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockConfig.RLock()
	calls = mock.calls.Config
	mock.lockConfig.RUnlock()
	return calls
}

// GetUserID calls GetUserIDFunc.
func (mock *FactoryMock) GetUserID() (string, error) {
	if mock.GetUserIDFunc == nil {
		panic("FactoryMock.GetUserIDFunc: method is nil but Factory.GetUserID was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetUserID.Lock()
	mock.calls.GetUserID = append(mock.calls.GetUserID, callInfo)
	mock.lockGetUserID.Unlock()
	return mock.GetUserIDFunc()
}

// GetUserIDCalls gets all the calls that were made to GetUserID.
// Check the length with:
//     len(mockedFactory.GetUserIDCalls())
func (mock *FactoryMock) GetUserIDCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetUserID.RLock()
	calls = mock.calls.GetUserID
	mock.lockGetUserID.RUnlock()
	return calls
}

// GetWorkspace calls GetWorkspaceFunc.
func (mock *FactoryMock) GetWorkspace() (dto.Workspace, error) {
	if mock.GetWorkspaceFunc == nil {
		panic("FactoryMock.GetWorkspaceFunc: method is nil but Factory.GetWorkspace was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetWorkspace.Lock()
	mock.calls.GetWorkspace = append(mock.calls.GetWorkspace, callInfo)
	mock.lockGetWorkspace.Unlock()
	return mock.GetWorkspaceFunc()
}

// GetWorkspaceCalls gets all the calls that were made to GetWorkspace.
// Check the length with:
//     len(mockedFactory.GetWorkspaceCalls())
func (mock *FactoryMock) GetWorkspaceCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetWorkspace.RLock()
	calls = mock.calls.GetWorkspace
	mock.lockGetWorkspace.RUnlock()
	return calls
}

// GetWorkspaceID calls GetWorkspaceIDFunc.
func (mock *FactoryMock) GetWorkspaceID() (string, error) {
	if mock.GetWorkspaceIDFunc == nil {
		panic("FactoryMock.GetWorkspaceIDFunc: method is nil but Factory.GetWorkspaceID was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetWorkspaceID.Lock()
	mock.calls.GetWorkspaceID = append(mock.calls.GetWorkspaceID, callInfo)
	mock.lockGetWorkspaceID.Unlock()
	return mock.GetWorkspaceIDFunc()
}

// GetWorkspaceIDCalls gets all the calls that were made to GetWorkspaceID.
// Check the length with:
//     len(mockedFactory.GetWorkspaceIDCalls())
func (mock *FactoryMock) GetWorkspaceIDCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetWorkspaceID.RLock()
	calls = mock.calls.GetWorkspaceID
	mock.lockGetWorkspaceID.RUnlock()
	return calls
}

// Version calls VersionFunc.
func (mock *FactoryMock) Version() Version {
	if mock.VersionFunc == nil {
		panic("FactoryMock.VersionFunc: method is nil but Factory.Version was just called")
	}
	callInfo := struct {
	}{}
	mock.lockVersion.Lock()
	mock.calls.Version = append(mock.calls.Version, callInfo)
	mock.lockVersion.Unlock()
	return mock.VersionFunc()
}

// VersionCalls gets all the calls that were made to Version.
// Check the length with:
//     len(mockedFactory.VersionCalls())
func (mock *FactoryMock) VersionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockVersion.RLock()
	calls = mock.calls.Version
	mock.lockVersion.RUnlock()
	return calls
}
